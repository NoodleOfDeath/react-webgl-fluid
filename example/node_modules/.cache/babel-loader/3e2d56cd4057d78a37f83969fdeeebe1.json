{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nvar Pointer = function Pointer(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? -1 : _ref$id,\n      _ref$texcoordX = _ref.texcoordX,\n      texcoordX = _ref$texcoordX === void 0 ? 0 : _ref$texcoordX,\n      _ref$texcoordY = _ref.texcoordY,\n      texcoordY = _ref$texcoordY === void 0 ? 0 : _ref$texcoordY,\n      _ref$prevTexcoordX = _ref.prevTexcoordX,\n      prevTexcoordX = _ref$prevTexcoordX === void 0 ? 0 : _ref$prevTexcoordX,\n      _ref$prevTexcoordY = _ref.prevTexcoordY,\n      prevTexcoordY = _ref$prevTexcoordY === void 0 ? 0 : _ref$prevTexcoordY,\n      _ref$deltaX = _ref.deltaX,\n      deltaX = _ref$deltaX === void 0 ? 0 : _ref$deltaX,\n      _ref$deltaY = _ref.deltaY,\n      deltaY = _ref$deltaY === void 0 ? 0 : _ref$deltaY,\n      _ref$down = _ref.down,\n      down = _ref$down === void 0 ? false : _ref$down,\n      _ref$moved = _ref.moved,\n      moved = _ref$moved === void 0 ? false : _ref$moved,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? {\n    r: 30,\n    g: 0,\n    b: 300\n  } : _ref$color;\n\n  this.id = id;\n  this.texcoordX = texcoordX;\n  this.texcoordY = texcoordY;\n  this.prevTexcoordX = prevTexcoordX;\n  this.prevTexcoordY = prevTexcoordY;\n  this.deltaX = deltaX;\n  this.deltaY = deltaY;\n  this.down = down;\n  this.moved = moved;\n  this.color = color;\n};\n\nfunction getWebGLContext(canvas) {\n  var _gl5, _halfFloat$HALF_FLOAT, _halfFloat;\n\n  var params = {\n    alpha: true,\n    depth: false,\n    stencil: false,\n    antialias: false,\n    preserveDrawingBuffer: false\n  };\n  var gl = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('webgl2', params);\n  var isWebGL2 = !!gl;\n\n  if (!isWebGL2) {\n    gl = (canvas === null || canvas === void 0 ? void 0 : canvas.getContext('webgl', params)) || (canvas === null || canvas === void 0 ? void 0 : canvas.getContext('experimental-webgl', params));\n  }\n\n  var halfFloat = {\n    HALF_FLOAT_OES: 0\n  };\n  var supportLinearFiltering;\n\n  if (isWebGL2) {\n    var _gl, _gl2;\n\n    (_gl = gl) === null || _gl === void 0 ? void 0 : _gl.getExtension('EXT_color_buffer_float');\n    supportLinearFiltering = (_gl2 = gl) === null || _gl2 === void 0 ? void 0 : _gl2.getExtension('OES_texture_float_linear');\n  } else {\n    var _gl3, _gl4;\n\n    halfFloat = (_gl3 = gl) === null || _gl3 === void 0 ? void 0 : _gl3.getExtension('OES_texture_half_float');\n    supportLinearFiltering = (_gl4 = gl) === null || _gl4 === void 0 ? void 0 : _gl4.getExtension('OES_texture_half_float_linear');\n  }\n\n  (_gl5 = gl) === null || _gl5 === void 0 ? void 0 : _gl5.clearColor(0.0, 0.0, 0.0, 1.0);\n  var halfFloatTexType = 0;\n  if (isWebGL2 || halfFloat) halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : (_halfFloat$HALF_FLOAT = (_halfFloat = halfFloat) === null || _halfFloat === void 0 ? void 0 : _halfFloat.HALF_FLOAT_OES) != null ? _halfFloat$HALF_FLOAT : 0;\n  var formatRGBA;\n  var formatRG;\n  var formatR;\n\n  if (isWebGL2) {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n  } else {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n  }\n\n  var obj = new WebGLRenderingContextWithExtensions(gl, {\n    formatRGBA: formatRGBA,\n    formatRG: formatRG,\n    formatR: formatR,\n    halfFloatTexType: halfFloatTexType,\n    supportLinearFiltering: supportLinearFiltering\n  });\n  return obj;\n}\n\nfunction getSupportedFormat(gl, internalFormat, format, type) {\n  if (format === void 0) {\n    format = 0;\n  }\n\n  if (type === void 0) {\n    type = 0;\n  }\n\n  if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n    switch (internalFormat) {\n      case gl.R16F:\n        return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n\n      case gl.RG16F:\n        return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n\n      default:\n        return null;\n    }\n  }\n\n  return {\n    internalFormat: internalFormat,\n    format: format\n  };\n}\n\nfunction supportRenderTextureFormat(gl, internalFormat, format, type) {\n  if (format === void 0) {\n    format = 0;\n  }\n\n  if (type === void 0) {\n    type = 0;\n  }\n\n  var texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\n  var fbo = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\nfunction hashCode(s) {\n  if (s.length === 0) return 0;\n  var hash = 0;\n\n  for (var i = 0; i < s.length; i++) {\n    hash = (hash << 5) - hash + s.charCodeAt(i);\n    hash |= 0;\n  }\n\n  return hash;\n}\n\nfunction getTextureScale(texture, width, height) {\n  var _texture$width, _texture$height;\n\n  return {\n    x: width / ((_texture$width = texture.width) != null ? _texture$width : 1),\n    y: height / ((_texture$height = texture.height) != null ? _texture$height : 1)\n  };\n}\n\nfunction generateColor() {\n  var c = HSVtoRGB(Math.random(), 1.0, 1.0);\n  c.r *= 0.15;\n  c.g *= 0.15;\n  c.b *= 0.15;\n  return c;\n}\n\nfunction HSVtoRGB(h, s, v) {\n  var i = Math.floor(h * 6);\n  var f = h * 6 - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      return {\n        r: v,\n        g: t,\n        b: p\n      };\n\n    case 1:\n      return {\n        r: q,\n        g: v,\n        b: p\n      };\n\n    case 2:\n      return {\n        r: p,\n        g: v,\n        b: t\n      };\n\n    case 3:\n      return {\n        r: p,\n        g: q,\n        b: v\n      };\n\n    case 4:\n      return {\n        r: t,\n        g: p,\n        b: v\n      };\n\n    case 5:\n      return {\n        r: v,\n        g: p,\n        b: q\n      };\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n}\n\nfunction normalizeColor(color) {\n  var output = {\n    r: color.r / 255,\n    g: color.g / 255,\n    b: color.b / 255\n  };\n  return output;\n}\n\nfunction wrap(value, min, max) {\n  var range = max - min;\n  if (range === 0) return min;\n  return (value - min) % range + min;\n}\n\nvar Program = /*#__PURE__*/function () {\n  function Program(gl, vertexShader, fragmentShader) {\n    this.gl = gl;\n\n    if (typeof fragmentShader === 'string') {\n      fragmentShader = gl.compileShaderOfType(gl.gl.FRAGMENT_SHADER, fragmentShader);\n    }\n\n    var program = gl.createProgramFromShader(vertexShader, fragmentShader);\n    this.program = program;\n    this.uniforms = gl.getUniforms(program);\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n  }\n\n  var _proto = Program.prototype;\n\n  _proto.bind = function bind() {\n    if (!this.program) return;\n    this.gl.gl.useProgram(this.program);\n  };\n\n  return Program;\n}();\n\nvar Material = /*#__PURE__*/function (_Program) {\n  _inheritsLoose(Material, _Program);\n\n  function Material(gl, vertexShader, fragmentShaderSource) {\n    var _this;\n\n    _this = _Program.call(this, gl, vertexShader, fragmentShaderSource) || this;\n    _this.fragmentShaderSource = '';\n    _this.vertexShader = vertexShader;\n    if (typeof fragmentShaderSource === 'string') _this.fragmentShaderSource = fragmentShaderSource;\n    _this.programs = [];\n    return _this;\n  }\n\n  var _proto2 = Material.prototype;\n\n  _proto2.setKeywords = function setKeywords() {\n    for (var _len = arguments.length, keywords = new Array(_len), _key = 0; _key < _len; _key++) {\n      keywords[_key] = arguments[_key];\n    }\n\n    var hash = keywords.length > 0 ? keywords.map(function (keyword) {\n      return hashCode(keyword);\n    }).reduce(function (prev, curr) {\n      return prev + curr;\n    }) : 0;\n\n    if (!this.programs[hash]) {\n      var fragmentShader = this.gl.compileShaderOfType(this.gl.gl.FRAGMENT_SHADER, this.fragmentShaderSource, keywords);\n\n      if (fragmentShader) {\n        var _program = this.gl.createProgramFromShader(this.vertexShader, fragmentShader);\n\n        if (_program) this.programs[hash] = _program;\n      }\n    }\n\n    var program = this.programs[hash];\n    if (program === this.program) return;\n    this.uniforms = this.gl.getUniforms(program);\n    this.program = program;\n  };\n\n  return Material;\n}(Program);\n\nvar WebGLRenderingContextWithExtensions = /*#__PURE__*/function () {\n  function WebGLRenderingContextWithExtensions(gl, ext) {\n    if (ext === void 0) {\n      ext = {};\n    }\n\n    this.gl = gl;\n    this.ext = ext;\n  }\n\n  var _proto3 = WebGLRenderingContextWithExtensions.prototype;\n\n  _proto3.compileShaderOfType = function compileShaderOfType(type, source, keywords) {\n    if (keywords === void 0) {\n      keywords = [];\n    }\n\n    source = [].concat(keywords.map(function (keyword) {\n      return \"#define \" + keyword;\n    }), [source]).join('\\n');\n    var shader = this.gl.createShader(type);\n\n    if (!shader) {\n      throw new Error('error creating shader');\n    }\n\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) console.trace(this.gl.getShaderInfoLog(shader));\n    return shader;\n  };\n\n  _proto3.getUniforms = function getUniforms(program) {\n    var uniforms = {};\n    var uniformCount = this.gl.getProgramParameter(program, this.gl.ACTIVE_UNIFORMS);\n\n    for (var i = 0; i < uniformCount; i++) {\n      var _this$gl$getActiveUni;\n\n      var uniformName = (_this$gl$getActiveUni = this.gl.getActiveUniform(program, i)) === null || _this$gl$getActiveUni === void 0 ? void 0 : _this$gl$getActiveUni.name;\n\n      if (!uniformName) {\n        console.error('error generating uniform');\n        continue;\n      }\n\n      var uniform = this.gl.getUniformLocation(program, uniformName);\n\n      if (!uniform) {\n        console.error('error generating uniform location');\n        continue;\n      }\n\n      uniforms[uniformName] = uniform;\n    }\n\n    return uniforms;\n  };\n\n  _proto3.createProgramFromShader = function createProgramFromShader(vertexShader, fragmentShader) {\n    var program = this.gl.createProgram();\n\n    if (!program) {\n      throw new Error('error creating program');\n    }\n\n    this.gl.attachShader(program, vertexShader);\n    this.gl.attachShader(program, fragmentShader);\n    this.gl.linkProgram(program);\n    if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) console.trace(this.gl.getProgramInfoLog(program));\n    return program;\n  };\n\n  _proto3.getResolution = function getResolution(resolution) {\n    var aspectRatio = this.gl.drawingBufferWidth / this.gl.drawingBufferHeight;\n    if (aspectRatio < 1) aspectRatio = 1.0 / aspectRatio;\n    var min = Math.round(resolution);\n    var max = Math.round(resolution * aspectRatio);\n    if (this.gl.drawingBufferWidth > this.gl.drawingBufferHeight) return {\n      width: max,\n      height: min\n    };else return {\n      width: min,\n      height: max\n    };\n  };\n\n  _createClass(WebGLRenderingContextWithExtensions, [{\n    key: \"baseVertexShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.VERTEX_SHADER, \"\\n      precision highp float;\\n\\n      attribute vec2 aPosition;\\n      varying vec2 vUv;\\n      varying vec2 vL;\\n      varying vec2 vR;\\n      varying vec2 vT;\\n      varying vec2 vB;\\n      uniform vec2 texelSize;\\n\\n      void main () {\\n          vUv = aPosition * 0.5 + 0.5;\\n          vL = vUv - vec2(texelSize.x, 0.0);\\n          vR = vUv + vec2(texelSize.x, 0.0);\\n          vT = vUv + vec2(0.0, texelSize.y);\\n          vB = vUv - vec2(0.0, texelSize.y);\\n          gl_Position = vec4(aPosition, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"blurVertexShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.VERTEX_SHADER, \"\\n      precision highp float;\\n\\n      attribute vec2 aPosition;\\n      varying vec2 vUv;\\n      varying vec2 vL;\\n      varying vec2 vR;\\n      uniform vec2 texelSize;\\n\\n      void main () {\\n          vUv = aPosition * 0.5 + 0.5;\\n          float offset = 1.33333333;\\n          vL = vUv - texelSize * offset;\\n          vR = vUv + texelSize * offset;\\n          gl_Position = vec4(aPosition, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"blurShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying vec2 vUv;\\n      varying vec2 vL;\\n      varying vec2 vR;\\n      uniform sampler2D uTexture;\\n\\n      void main () {\\n          vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\\n          sum += texture2D(uTexture, vL) * 0.35294117;\\n          sum += texture2D(uTexture, vR) * 0.35294117;\\n          gl_FragColor = sum;\\n      }\\n      \");\n    }\n  }, {\n    key: \"copyShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying highp vec2 vUv;\\n      uniform sampler2D uTexture;\\n\\n      void main () {\\n          gl_FragColor = texture2D(uTexture, vUv);\\n      }\\n      \");\n    }\n  }, {\n    key: \"clearShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying highp vec2 vUv;\\n      uniform sampler2D uTexture;\\n      uniform float value;\\n\\n      void main () {\\n          gl_FragColor = value * texture2D(uTexture, vUv);\\n      }\\n      \");\n    }\n  }, {\n    key: \"colorShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n\\n      uniform vec4 color;\\n\\n      void main () {\\n          gl_FragColor = color;\\n      }\\n      \");\n    }\n  }, {\n    key: \"checkerboardShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision highp float;\\n      precision highp sampler2D;\\n\\n      varying vec2 vUv;\\n      uniform sampler2D uTexture;\\n      uniform float aspectRatio;\\n\\n      #define SCALE 25.0\\n\\n      void main () {\\n          vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\\n          float v = mod(uv.x + uv.y, 2.0);\\n          v = v * 0.1 + 0.8;\\n          gl_FragColor = vec4(vec3(v), 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"displayShaderSource\",\n    get: function get() {\n      return \"\\n    precision highp float;\\n    precision highp sampler2D;\\n\\n    varying vec2 vUv;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    varying vec2 vT;\\n    varying vec2 vB;\\n    uniform sampler2D uTexture;\\n    uniform sampler2D uBloom;\\n    uniform sampler2D uSunrays;\\n    uniform sampler2D uDithering;\\n    uniform vec2 ditherScale;\\n    uniform vec2 texelSize;\\n\\n    vec3 linearToGamma (vec3 color) {\\n        color = max(color, vec3(0));\\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\\n    }\\n\\n    void main () {\\n        vec3 c = texture2D(uTexture, vUv).rgb;\\n\\n    #ifdef SHADING\\n        vec3 lc = texture2D(uTexture, vL).rgb;\\n        vec3 rc = texture2D(uTexture, vR).rgb;\\n        vec3 tc = texture2D(uTexture, vT).rgb;\\n        vec3 bc = texture2D(uTexture, vB).rgb;\\n\\n        float dx = length(rc) - length(lc);\\n        float dy = length(tc) - length(bc);\\n\\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\\n        vec3 l = vec3(0.0, 0.0, 1.0);\\n\\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\\n        c *= diffuse;\\n    #endif\\n\\n    #ifdef BLOOM\\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\\n    #endif\\n\\n    #ifdef SUNRAYS\\n        float sunrays = texture2D(uSunrays, vUv).r;\\n        c *= sunrays;\\n    #ifdef BLOOM\\n        bloom *= sunrays;\\n    #endif\\n    #endif\\n\\n    #ifdef BLOOM\\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\\n        noise = noise * 2.0 - 1.0;\\n        bloom += noise / 255.0;\\n        bloom = linearToGamma(bloom);\\n        c += bloom;\\n    #endif\\n\\n        float a = max(c.r, max(c.g, c.b));\\n        gl_FragColor = vec4(c, a);\\n    }\\n    \";\n    }\n  }, {\n    key: \"bloomPrefilterShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying vec2 vUv;\\n      uniform sampler2D uTexture;\\n      uniform vec3 curve;\\n      uniform float threshold;\\n\\n      void main () {\\n          vec3 c = texture2D(uTexture, vUv).rgb;\\n          float br = max(c.r, max(c.g, c.b));\\n          float rq = clamp(br - curve.x, 0.0, curve.y);\\n          rq = curve.z * rq * rq;\\n          c *= max(rq, br - threshold) / max(br, 0.0001);\\n          gl_FragColor = vec4(c, 0.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"bloomBlurShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying vec2 vL;\\n      varying vec2 vR;\\n      varying vec2 vT;\\n      varying vec2 vB;\\n      uniform sampler2D uTexture;\\n\\n      void main () {\\n          vec4 sum = vec4(0.0);\\n          sum += texture2D(uTexture, vL);\\n          sum += texture2D(uTexture, vR);\\n          sum += texture2D(uTexture, vT);\\n          sum += texture2D(uTexture, vB);\\n          sum *= 0.25;\\n          gl_FragColor = sum;\\n      }\\n      \");\n    }\n  }, {\n    key: \"bloomFinalShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying vec2 vL;\\n      varying vec2 vR;\\n      varying vec2 vT;\\n      varying vec2 vB;\\n      uniform sampler2D uTexture;\\n      uniform float intensity;\\n\\n      void main () {\\n          vec4 sum = vec4(0.0);\\n          sum += texture2D(uTexture, vL);\\n          sum += texture2D(uTexture, vR);\\n          sum += texture2D(uTexture, vT);\\n          sum += texture2D(uTexture, vB);\\n          sum *= 0.25;\\n          gl_FragColor = sum * intensity;\\n      }\\n      \");\n    }\n  }, {\n    key: \"sunraysMaskShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision highp float;\\n      precision highp sampler2D;\\n\\n      varying vec2 vUv;\\n      uniform sampler2D uTexture;\\n\\n      void main () {\\n          vec4 c = texture2D(uTexture, vUv);\\n          float br = max(c.r, max(c.g, c.b));\\n          c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\\n          gl_FragColor = c;\\n      }\\n      \");\n    }\n  }, {\n    key: \"sunraysShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision highp float;\\n      precision highp sampler2D;\\n\\n      varying vec2 vUv;\\n      uniform sampler2D uTexture;\\n      uniform float weight;\\n\\n      #define ITERATIONS 16\\n\\n      void main () {\\n          float Density = 0.3;\\n          float Decay = 0.95;\\n          float Exposure = 0.7;\\n\\n          vec2 coord = vUv;\\n          vec2 dir = vUv - 0.5;\\n\\n          dir *= 1.0 / float(ITERATIONS) * Density;\\n          float illuminationDecay = 1.0;\\n\\n          float color = texture2D(uTexture, vUv).a;\\n\\n          for (int i = 0; i < ITERATIONS; i++)\\n          {\\n              coord -= dir;\\n              float col = texture2D(uTexture, coord).a;\\n              color += col * illuminationDecay * weight;\\n              illuminationDecay *= Decay;\\n          }\\n\\n          gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"splatShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision highp float;\\n      precision highp sampler2D;\\n\\n      varying vec2 vUv;\\n      uniform sampler2D uTarget;\\n      uniform float aspectRatio;\\n      uniform vec3 color;\\n      uniform vec2 point;\\n      uniform float radius;\\n\\n      void main () {\\n          vec2 p = vUv - point.xy;\\n          p.x *= aspectRatio;\\n          vec3 splat = exp(-dot(p, p) / radius) * color;\\n          vec3 base = texture2D(uTarget, vUv).xyz;\\n          gl_FragColor = vec4(base + splat, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"advectionShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision highp float;\\n      precision highp sampler2D;\\n\\n      varying vec2 vUv;\\n      uniform sampler2D uVelocity;\\n      uniform sampler2D uSource;\\n      uniform vec2 texelSize;\\n      uniform vec2 dyeTexelSize;\\n      uniform float dt;\\n      uniform float dissipation;\\n\\n      vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\\n          vec2 st = uv / tsize - 0.5;\\n\\n          vec2 iuv = floor(st);\\n          vec2 fuv = fract(st);\\n\\n          vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\\n          vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\\n          vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\\n          vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\\n\\n          return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\\n      }\\n\\n      void main () {\\n      #ifdef MANUAL_FILTERING\\n          vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\\n          vec4 result = bilerp(uSource, coord, dyeTexelSize);\\n      #else\\n          vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\\n          vec4 result = texture2D(uSource, coord);\\n      #endif\\n          float decay = 1.0 + dissipation * dt;\\n          gl_FragColor = result / decay;\\n      }\\n      \", this.ext.supportLinearFiltering ? [] : ['MANUAL_FILTERING']);\n    }\n  }, {\n    key: \"divergenceShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying highp vec2 vUv;\\n      varying highp vec2 vL;\\n      varying highp vec2 vR;\\n      varying highp vec2 vT;\\n      varying highp vec2 vB;\\n      uniform sampler2D uVelocity;\\n\\n      void main () {\\n          float L = texture2D(uVelocity, vL).x;\\n          float R = texture2D(uVelocity, vR).x;\\n          float T = texture2D(uVelocity, vT).y;\\n          float B = texture2D(uVelocity, vB).y;\\n\\n          vec2 C = texture2D(uVelocity, vUv).xy;\\n          if (vL.x < 0.0) { L = -C.x; }\\n          if (vR.x > 1.0) { R = -C.x; }\\n          if (vT.y > 1.0) { T = -C.y; }\\n          if (vB.y < 0.0) { B = -C.y; }\\n\\n          float div = 0.5 * (R - L + T - B);\\n          gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"curlShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying highp vec2 vUv;\\n      varying highp vec2 vL;\\n      varying highp vec2 vR;\\n      varying highp vec2 vT;\\n      varying highp vec2 vB;\\n      uniform sampler2D uVelocity;\\n\\n      void main () {\\n          float L = texture2D(uVelocity, vL).y;\\n          float R = texture2D(uVelocity, vR).y;\\n          float T = texture2D(uVelocity, vT).x;\\n          float B = texture2D(uVelocity, vB).x;\\n          float vorticity = R - L - T + B;\\n          gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"vorticityShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision highp float;\\n      precision highp sampler2D;\\n\\n      varying vec2 vUv;\\n      varying vec2 vL;\\n      varying vec2 vR;\\n      varying vec2 vT;\\n      varying vec2 vB;\\n      uniform sampler2D uVelocity;\\n      uniform sampler2D uCurl;\\n      uniform float curl;\\n      uniform float dt;\\n\\n      void main () {\\n          float L = texture2D(uCurl, vL).x;\\n          float R = texture2D(uCurl, vR).x;\\n          float T = texture2D(uCurl, vT).x;\\n          float B = texture2D(uCurl, vB).x;\\n          float C = texture2D(uCurl, vUv).x;\\n\\n          vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\\n          force /= length(force) + 0.0001;\\n          force *= curl * C;\\n          force.y *= -1.0;\\n\\n          vec2 velocity = texture2D(uVelocity, vUv).xy;\\n          velocity += force * dt;\\n          velocity = min(max(velocity, -1000.0), 1000.0);\\n          gl_FragColor = vec4(velocity, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"pressureShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying highp vec2 vUv;\\n      varying highp vec2 vL;\\n      varying highp vec2 vR;\\n      varying highp vec2 vT;\\n      varying highp vec2 vB;\\n      uniform sampler2D uPressure;\\n      uniform sampler2D uDivergence;\\n\\n      void main () {\\n          float L = texture2D(uPressure, vL).x;\\n          float R = texture2D(uPressure, vR).x;\\n          float T = texture2D(uPressure, vT).x;\\n          float B = texture2D(uPressure, vB).x;\\n          float C = texture2D(uPressure, vUv).x;\\n          float divergence = texture2D(uDivergence, vUv).x;\\n          float pressure = (L + R + B + T - divergence) * 0.25;\\n          gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }, {\n    key: \"gradientSubtractShader\",\n    get: function get() {\n      return this.compileShaderOfType(this.gl.FRAGMENT_SHADER, \"\\n      precision mediump float;\\n      precision mediump sampler2D;\\n\\n      varying highp vec2 vUv;\\n      varying highp vec2 vL;\\n      varying highp vec2 vR;\\n      varying highp vec2 vT;\\n      varying highp vec2 vB;\\n      uniform sampler2D uPressure;\\n      uniform sampler2D uVelocity;\\n\\n      void main () {\\n          float L = texture2D(uPressure, vL).x;\\n          float R = texture2D(uPressure, vR).x;\\n          float T = texture2D(uPressure, vT).x;\\n          float B = texture2D(uPressure, vB).x;\\n          vec2 velocity = texture2D(uVelocity, vUv).xy;\\n          velocity.xy -= vec2(R - L, T - B);\\n          gl_FragColor = vec4(velocity, 0.0, 1.0);\\n      }\\n      \");\n    }\n  }]);\n\n  return WebGLRenderingContextWithExtensions;\n}();\n\nvar _templateObject;\n\nvar StyledCanvas = styled.canvas(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  width: 100%;\\n  height: 100%;\\n  z-index: -1;\\n  position: \", \";\\n\"])), function (_ref) {\n  var fixed = _ref.fixed;\n  return fixed ? 'fixed' : 'static';\n});\n\nfunction scaleByPixelRatio(input) {\n  return Math.floor(input * (window.devicePixelRatio || 1));\n}\n\nfunction resizeCanvas(canvas) {\n  var width = scaleByPixelRatio(canvas.clientWidth);\n  var height = scaleByPixelRatio(canvas.clientHeight);\n\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n\n  return false;\n}\n\nfunction isMobile() {\n  return /Mobi|Android/i.test(navigator.userAgent);\n}\n\nvar GL_CONFIGS = {\n  SIM_RESOLUTION: 128,\n  DYE_RESOLUTION: isMobile() ? 512 : 1024,\n  CAPTURE_RESOLUTION: 512,\n  DENSITY_DISSIPATION: 0.7,\n  VELOCITY_DISSIPATION: 0.2,\n  PRESSURE: 0.3,\n  PRESSURE_ITERATIONS: 20,\n  CURL: 30,\n  SPLAT_RADIUS: 0.25,\n  SPLAT_FORCE: 2000,\n  SHADING: true,\n  COLORFUL: true,\n  COLOR_UPDATE_SPEED: 10,\n  PAUSED: false,\n  BACK_COLOR: {\n    r: 0,\n    g: 0,\n    b: 0\n  },\n  TRANSPARENT: false,\n  BLOOM: true,\n  BLOOM_ITERATIONS: 8,\n  BLOOM_RESOLUTION: 256,\n  BLOOM_INTENSITY: 0.8,\n  BLOOM_THRESHOLD: 0.6,\n  BLOOM_SOFT_KNEE: 0.7,\n  RESIZE_DELAY: 30,\n  SPLAT_COUNT: function SPLAT_COUNT() {\n    return Math.floor(Math.random() * 2) + 1;\n  },\n  SPLAT_RATE: 5000,\n  SUNRAYS: true,\n  SUNRAYS_RESOLUTION: 196,\n  SUNRAYS_WEIGHT: 1.0\n};\n\nfunction WebGLFluidSim(_ref2) {\n  var _ref2$fixed = _ref2.fixed,\n      fixed = _ref2$fixed === void 0 ? true : _ref2$fixed;\n  var refCanvas = React.useRef(null);\n\n  var _React$useState = React.useState(null),\n      canvas = _React$useState[0],\n      setCanvas = _React$useState[1];\n\n  React.useEffect(function () {\n    var canvas = refCanvas === null || refCanvas === void 0 ? void 0 : refCanvas.current;\n    if (!canvas) return;\n    resizeCanvas(canvas);\n    setCanvas(canvas);\n  }, []);\n  React.useEffect(function () {\n    if (!canvas) return;\n    var context = getWebGLContext(canvas);\n    var pointers = [];\n    var splatStack = [];\n    pointers.push(new Pointer());\n\n    var blit = function () {\n      context.gl.bindBuffer(context.gl.ARRAY_BUFFER, context.gl.createBuffer());\n      context.gl.bufferData(context.gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), context.gl.STATIC_DRAW);\n      context.gl.bindBuffer(context.gl.ELEMENT_ARRAY_BUFFER, context.gl.createBuffer());\n      context.gl.bufferData(context.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), context.gl.STATIC_DRAW);\n      context.gl.vertexAttribPointer(0, 2, context.gl.FLOAT, false, 0, 0);\n      context.gl.enableVertexAttribArray(0);\n      return function (target, clear) {\n        if (clear === void 0) {\n          clear = false;\n        }\n\n        if (!target) {\n          context.gl.viewport(0, 0, context.gl.drawingBufferWidth, context.gl.drawingBufferHeight);\n          context.gl.bindFramebuffer(context.gl.FRAMEBUFFER, null);\n        } else {\n          var _target$width, _target$height, _target$fbo;\n\n          context.gl.viewport(0, 0, (_target$width = target.width) != null ? _target$width : 0, (_target$height = target.height) != null ? _target$height : 0);\n          context.gl.bindFramebuffer(context.gl.FRAMEBUFFER, (_target$fbo = target.fbo) != null ? _target$fbo : null);\n        }\n\n        if (clear) {\n          context.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n          context.gl.clear(context.gl.COLOR_BUFFER_BIT);\n        }\n\n        context.gl.drawElements(context.gl.TRIANGLES, 6, context.gl.UNSIGNED_SHORT, 0);\n      };\n    }();\n\n    var dye;\n    var velocity;\n    var divergence;\n    var curl;\n    var pressure;\n    var bloom;\n    var bloomFramebuffers = [];\n    var sunrays;\n    var sunraysTemp;\n    var ditheringTexture = createTextureAsync('LDR_LLL1_0.png');\n    var blurProgram = new Program(context, context.blurVertexShader, context.blurShader);\n    var copyProgram = new Program(context, context.baseVertexShader, context.copyShader);\n    var clearProgram = new Program(context, context.baseVertexShader, context.clearShader);\n    var colorProgram = new Program(context, context.baseVertexShader, context.colorShader);\n    var checkerboardProgram = new Program(context, context.baseVertexShader, context.checkerboardShader);\n    var bloomPrefilterProgram = new Program(context, context.baseVertexShader, context.bloomPrefilterShader);\n    var bloomBlurProgram = new Program(context, context.baseVertexShader, context.bloomBlurShader);\n    var bloomFinalProgram = new Program(context, context.baseVertexShader, context.bloomFinalShader);\n    var sunraysMaskProgram = new Program(context, context.baseVertexShader, context.sunraysMaskShader);\n    var sunraysProgram = new Program(context, context.baseVertexShader, context.sunraysShader);\n    var splatProgram = new Program(context, context.baseVertexShader, context.splatShader);\n    var advectionProgram = new Program(context, context.baseVertexShader, context.advectionShader);\n    var divergenceProgram = new Program(context, context.baseVertexShader, context.divergenceShader);\n    var curlProgram = new Program(context, context.baseVertexShader, context.curlShader);\n    var vorticityProgram = new Program(context, context.baseVertexShader, context.vorticityShader);\n    var pressureProgram = new Program(context, context.baseVertexShader, context.pressureShader);\n    var gradientSubtractProgram = new Program(context, context.baseVertexShader, context.gradientSubtractShader);\n    var displayMaterial = new Material(context, context.baseVertexShader, context.displayShaderSource);\n\n    var initFramebuffers = function initFramebuffers() {\n      var _rgba$internalFormat, _rgba$format, _rgba$internalFormat2, _rgba$format2, _rg$internalFormat, _rg$format, _rg$internalFormat2, _rg$format2, _r$internalFormat, _r$format, _r$internalFormat2, _r$format2, _r$internalFormat3, _r$format3;\n\n      var simRes = context.getResolution(GL_CONFIGS.SIM_RESOLUTION);\n      var dyeRes = context.getResolution(GL_CONFIGS.DYE_RESOLUTION);\n      var texType = context.ext.halfFloatTexType;\n      var rgba = context.ext.formatRGBA;\n      var rg = context.ext.formatRG;\n      var r = context.ext.formatR;\n      var filtering = context.ext.supportLinearFiltering ? context.gl.LINEAR : context.gl.NEAREST;\n      context.gl.disable(context.gl.BLEND);\n      if (!dye) dye = createDoubleFBO(dyeRes.width, dyeRes.height, (_rgba$internalFormat = rgba === null || rgba === void 0 ? void 0 : rgba.internalFormat) != null ? _rgba$internalFormat : 0, (_rgba$format = rgba === null || rgba === void 0 ? void 0 : rgba.format) != null ? _rgba$format : 0, texType != null ? texType : 0, filtering);else dye = resizeDoubleFBO(dye, dyeRes.width, dyeRes.height, (_rgba$internalFormat2 = rgba === null || rgba === void 0 ? void 0 : rgba.internalFormat) != null ? _rgba$internalFormat2 : 0, (_rgba$format2 = rgba === null || rgba === void 0 ? void 0 : rgba.format) != null ? _rgba$format2 : 0, texType != null ? texType : 0, filtering);\n      if (!velocity) velocity = createDoubleFBO(simRes.width, simRes.height, (_rg$internalFormat = rg === null || rg === void 0 ? void 0 : rg.internalFormat) != null ? _rg$internalFormat : 0, (_rg$format = rg === null || rg === void 0 ? void 0 : rg.format) != null ? _rg$format : 0, texType != null ? texType : 0, filtering);else velocity = resizeDoubleFBO(velocity, simRes.width, simRes.height, (_rg$internalFormat2 = rg === null || rg === void 0 ? void 0 : rg.internalFormat) != null ? _rg$internalFormat2 : 0, (_rg$format2 = rg === null || rg === void 0 ? void 0 : rg.format) != null ? _rg$format2 : 0, texType != null ? texType : 0, filtering);\n      divergence = createFBO(simRes.width, simRes.height, (_r$internalFormat = r === null || r === void 0 ? void 0 : r.internalFormat) != null ? _r$internalFormat : 0, (_r$format = r === null || r === void 0 ? void 0 : r.format) != null ? _r$format : 0, texType != null ? texType : 0, context.gl.NEAREST);\n      curl = createFBO(simRes.width, simRes.height, (_r$internalFormat2 = r === null || r === void 0 ? void 0 : r.internalFormat) != null ? _r$internalFormat2 : 0, (_r$format2 = r === null || r === void 0 ? void 0 : r.format) != null ? _r$format2 : 0, texType != null ? texType : 0, context.gl.NEAREST);\n      pressure = createDoubleFBO(simRes.width, simRes.height, (_r$internalFormat3 = r === null || r === void 0 ? void 0 : r.internalFormat) != null ? _r$internalFormat3 : 0, (_r$format3 = r === null || r === void 0 ? void 0 : r.format) != null ? _r$format3 : 0, texType != null ? texType : 0, context.gl.NEAREST);\n      initBloomFramebuffers();\n      initSunraysFramebuffers();\n    };\n\n    var initBloomFramebuffers = function initBloomFramebuffers() {\n      var _rgba$internalFormat3, _rgba$format3;\n\n      var res = context.getResolution(GL_CONFIGS.BLOOM_RESOLUTION);\n      var texType = context.ext.halfFloatTexType;\n      var rgba = context.ext.formatRGBA;\n      var filtering = context.ext.supportLinearFiltering ? context.gl.LINEAR : context.gl.NEAREST;\n      bloom = createFBO(res.width, res.height, (_rgba$internalFormat3 = rgba === null || rgba === void 0 ? void 0 : rgba.internalFormat) != null ? _rgba$internalFormat3 : 0, (_rgba$format3 = rgba === null || rgba === void 0 ? void 0 : rgba.format) != null ? _rgba$format3 : 0, texType != null ? texType : 0, filtering);\n      bloomFramebuffers.length = 0;\n\n      for (var i = 0; i < GL_CONFIGS.BLOOM_ITERATIONS; i++) {\n        var _rgba$internalFormat4, _rgba$format4;\n\n        var width = res.width >> i + 1;\n        var height = res.height >> i + 1;\n        if (width < 2 || height < 2) break;\n        var fbo = createFBO(width, height, (_rgba$internalFormat4 = rgba === null || rgba === void 0 ? void 0 : rgba.internalFormat) != null ? _rgba$internalFormat4 : 0, (_rgba$format4 = rgba === null || rgba === void 0 ? void 0 : rgba.format) != null ? _rgba$format4 : 0, texType != null ? texType : 0, filtering);\n        bloomFramebuffers.push(fbo);\n      }\n    };\n\n    var initSunraysFramebuffers = function initSunraysFramebuffers() {\n      var _r$internalFormat4, _r$format4, _r$internalFormat5, _r$format5;\n\n      var res = context.getResolution(GL_CONFIGS.SUNRAYS_RESOLUTION);\n      var texType = context.ext.halfFloatTexType;\n      var r = context.ext.formatR;\n      var filtering = context.ext.supportLinearFiltering ? context.gl.LINEAR : context.gl.NEAREST;\n      sunrays = createFBO(res.width, res.height, (_r$internalFormat4 = r === null || r === void 0 ? void 0 : r.internalFormat) != null ? _r$internalFormat4 : 0, (_r$format4 = r === null || r === void 0 ? void 0 : r.format) != null ? _r$format4 : 0, texType != null ? texType : 0, filtering);\n      sunraysTemp = createFBO(res.width, res.height, (_r$internalFormat5 = r === null || r === void 0 ? void 0 : r.internalFormat) != null ? _r$internalFormat5 : 0, (_r$format5 = r === null || r === void 0 ? void 0 : r.format) != null ? _r$format5 : 0, texType != null ? texType : 0, filtering);\n    };\n\n    function createFBO(w, h, internalFormat, format, type, param) {\n      context.gl.activeTexture(context.gl.TEXTURE0);\n      var texture = context.gl.createTexture();\n      context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MIN_FILTER, param);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MAG_FILTER, param);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_S, context.gl.CLAMP_TO_EDGE);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_T, context.gl.CLAMP_TO_EDGE);\n      context.gl.texImage2D(context.gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\n      var fbo = context.gl.createFramebuffer();\n      context.gl.bindFramebuffer(context.gl.FRAMEBUFFER, fbo);\n      context.gl.framebufferTexture2D(context.gl.FRAMEBUFFER, context.gl.COLOR_ATTACHMENT0, context.gl.TEXTURE_2D, texture, 0);\n      context.gl.viewport(0, 0, w, h);\n      context.gl.clear(context.gl.COLOR_BUFFER_BIT);\n      var texelSizeX = 1.0 / w;\n      var texelSizeY = 1.0 / h;\n      return {\n        texture: texture,\n        fbo: fbo,\n        width: w,\n        height: h,\n        texelSizeX: texelSizeX,\n        texelSizeY: texelSizeY,\n        attach: function attach(id) {\n          context.gl.activeTexture(context.gl.TEXTURE0 + id);\n          context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n          return id;\n        }\n      };\n    }\n\n    function createDoubleFBO(w, h, internalFormat, format, type, param) {\n      var _fbo1$texelSizeX, _fbo, _fbo1$texelSizeY, _fbo2;\n\n      var fbo1 = createFBO(w, h, internalFormat, format, type, param);\n      var fbo2 = createFBO(w, h, internalFormat, format, type, param);\n      return {\n        width: w,\n        height: h,\n        texelSizeX: (_fbo1$texelSizeX = (_fbo = fbo1) === null || _fbo === void 0 ? void 0 : _fbo.texelSizeX) != null ? _fbo1$texelSizeX : 0,\n        texelSizeY: (_fbo1$texelSizeY = (_fbo2 = fbo1) === null || _fbo2 === void 0 ? void 0 : _fbo2.texelSizeY) != null ? _fbo1$texelSizeY : 0,\n\n        get read() {\n          return fbo1;\n        },\n\n        set read(value) {\n          fbo1 = value;\n        },\n\n        get write() {\n          return fbo2;\n        },\n\n        set write(value) {\n          fbo2 = value;\n        },\n\n        swap: function swap() {\n          var temp = fbo1;\n          fbo1 = fbo2;\n          fbo2 = temp;\n        }\n      };\n    }\n\n    function resizeFBO(target, w, h, internalFormat, format, type, param) {\n      var newFBO = createFBO(w, h, internalFormat, format, type, param);\n      copyProgram.bind();\n      context.gl.uniform1i(copyProgram.uniforms.uTexture, target.attach ? target.attach(0) : 0);\n      blit(newFBO);\n      return newFBO;\n    }\n\n    function resizeDoubleFBO(target, w, h, internalFormat, format, type, param) {\n      if (target.width === w && target.height === h) return target;\n      if (!target.read) return target;\n      target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);\n      target.write = createFBO(w, h, internalFormat, format, type, param);\n      target.width = w;\n      target.height = h;\n      target.texelSizeX = 1.0 / w;\n      target.texelSizeY = 1.0 / h;\n      return target;\n    }\n\n    function createTextureAsync(url) {\n      var texture = context.gl.createTexture();\n      context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MIN_FILTER, context.gl.LINEAR);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MAG_FILTER, context.gl.LINEAR);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_S, context.gl.REPEAT);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_T, context.gl.REPEAT);\n      context.gl.texImage2D(context.gl.TEXTURE_2D, 0, context.gl.RGB, 1, 1, 0, context.gl.RGB, context.gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255]));\n      var obj = {\n        texture: texture,\n        width: 1,\n        height: 1,\n        attach: function attach(id) {\n          context.gl.activeTexture(context.gl.TEXTURE0 + id);\n          context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n          return id;\n        }\n      };\n      var image = new Image();\n\n      image.onload = function () {\n        obj.width = image.width;\n        obj.height = image.height;\n        context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n        context.gl.texImage2D(context.gl.TEXTURE_2D, 0, context.gl.RGB, context.gl.RGB, context.gl.UNSIGNED_BYTE, image);\n      };\n\n      image.src = url;\n      return obj;\n    }\n\n    var updateKeywords = function updateKeywords() {\n      var displayKeywords = [];\n      if (GL_CONFIGS.SHADING) displayKeywords.push('SHADING');\n      if (GL_CONFIGS.BLOOM) displayKeywords.push('BLOOM');\n      if (GL_CONFIGS.SUNRAYS) displayKeywords.push('SUNRAYS');\n      displayMaterial.setKeywords.apply(displayMaterial, displayKeywords);\n    };\n\n    updateKeywords();\n    initFramebuffers();\n    multipleSplats(canvas, Math.floor(Math.random() * 20) + 5);\n    var lastUpdateTime = Date.now();\n    var colorUpdateTimer = 0.0;\n\n    var calcDeltaTime = function calcDeltaTime() {\n      var now = Date.now();\n      var dt = Math.min((now - lastUpdateTime) / 1000, 0.016666);\n      lastUpdateTime = now;\n      return dt;\n    };\n\n    var updateColors = function updateColors(dt) {\n      if (!GL_CONFIGS.COLORFUL) return;\n      colorUpdateTimer += dt * GL_CONFIGS.COLOR_UPDATE_SPEED;\n\n      if (colorUpdateTimer >= 1) {\n        colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\n        pointers.forEach(function (p) {\n          p.color = generateColor();\n        });\n      }\n    };\n\n    var applyInputs = function applyInputs() {\n      if (splatStack.length > 0) multipleSplats(canvas, splatStack.pop());\n      pointers.forEach(function (p) {\n        if (p.moved) {\n          p.moved = false;\n          splatPointer(p);\n        }\n      });\n    };\n\n    var step = function step(dt) {\n      var _ref3, _velocity$texelSizeX, _velocity, _ref4, _velocity$texelSizeY, _velocity2, _velocity3, _velocity3$read, _ref5, _velocity$texelSizeX2, _velocity4, _ref6, _velocity$texelSizeY2, _velocity5, _velocity6, _velocity6$read, _curl, _velocity7, _velocity$texelSizeX3, _velocity8, _velocity$texelSizeY3, _velocity9, _velocity10, _velocity10$read, _pressure, _pressure$read, _pressure2, _pressure3, _velocity$texelSizeX4, _velocity11, _velocity$texelSizeY4, _velocity12, _divergence, _velocity$texelSizeX5, _velocity13, _velocity$texelSizeY5, _velocity14, _pressure5, _pressure5$read, _velocity15, _velocity15$read, _velocity16, _velocity17, _velocity$texelSizeX6, _velocity18, _velocity$texelSizeY6, _velocity19, _velocity$texelSizeX7, _velocity20, _velocity$texelSizeY7, _velocity21, _velocity22, _velocity22$read, _velocity23, _velocity24, _dye$texelSizeX, _dye, _dye$texelSizeY, _dye2, _velocity25, _velocity25$read, _dye3, _dye3$read, _dye4, _dye5;\n\n      context.gl.disable(context.gl.BLEND);\n      curlProgram.bind();\n      context.gl.uniform2f(curlProgram.uniforms.texelSize, (_ref3 = (_velocity$texelSizeX = (_velocity = velocity) === null || _velocity === void 0 ? void 0 : _velocity.texelSizeX) != null ? _velocity$texelSizeX : 0) != null ? _ref3 : 0, (_ref4 = (_velocity$texelSizeY = (_velocity2 = velocity) === null || _velocity2 === void 0 ? void 0 : _velocity2.texelSizeY) != null ? _velocity$texelSizeY : 0) != null ? _ref4 : 0);\n      context.gl.uniform1i(curlProgram.uniforms.uVelocity, (_velocity3 = velocity) !== null && _velocity3 !== void 0 && (_velocity3$read = _velocity3.read) !== null && _velocity3$read !== void 0 && _velocity3$read.attach ? velocity.read.attach(0) : 0);\n      blit(curl);\n      vorticityProgram.bind();\n      context.gl.uniform2f(vorticityProgram.uniforms.texelSize, (_ref5 = (_velocity$texelSizeX2 = (_velocity4 = velocity) === null || _velocity4 === void 0 ? void 0 : _velocity4.texelSizeX) != null ? _velocity$texelSizeX2 : 0) != null ? _ref5 : 0, (_ref6 = (_velocity$texelSizeY2 = (_velocity5 = velocity) === null || _velocity5 === void 0 ? void 0 : _velocity5.texelSizeY) != null ? _velocity$texelSizeY2 : 0) != null ? _ref6 : 0);\n      context.gl.uniform1i(vorticityProgram.uniforms.uVelocity, (_velocity6 = velocity) !== null && _velocity6 !== void 0 && (_velocity6$read = _velocity6.read) !== null && _velocity6$read !== void 0 && _velocity6$read.attach ? velocity.read.attach(0) : 0);\n      if ((_curl = curl) !== null && _curl !== void 0 && _curl.attach) context.gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\n      context.gl.uniform1f(vorticityProgram.uniforms.curl, GL_CONFIGS.CURL);\n      context.gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n      if (velocity && velocity.write) blit(velocity.write);\n      if ((_velocity7 = velocity) !== null && _velocity7 !== void 0 && _velocity7.swap) velocity.swap();\n      divergenceProgram.bind();\n      context.gl.uniform2f(divergenceProgram.uniforms.texelSize, (_velocity$texelSizeX3 = (_velocity8 = velocity) === null || _velocity8 === void 0 ? void 0 : _velocity8.texelSizeX) != null ? _velocity$texelSizeX3 : 0, (_velocity$texelSizeY3 = (_velocity9 = velocity) === null || _velocity9 === void 0 ? void 0 : _velocity9.texelSizeY) != null ? _velocity$texelSizeY3 : 0);\n      context.gl.uniform1i(divergenceProgram.uniforms.uVelocity, (_velocity10 = velocity) !== null && _velocity10 !== void 0 && (_velocity10$read = _velocity10.read) !== null && _velocity10$read !== void 0 && _velocity10$read.attach ? velocity.read.attach(0) : 0);\n      blit(divergence);\n      clearProgram.bind();\n      context.gl.uniform1i(clearProgram.uniforms.uTexture, (_pressure = pressure) !== null && _pressure !== void 0 && (_pressure$read = _pressure.read) !== null && _pressure$read !== void 0 && _pressure$read.attach ? pressure.read.attach(0) : 0);\n      context.gl.uniform1f(clearProgram.uniforms.value, GL_CONFIGS.PRESSURE);\n      if ((_pressure2 = pressure) !== null && _pressure2 !== void 0 && _pressure2.write) blit(pressure.write);\n      if ((_pressure3 = pressure) !== null && _pressure3 !== void 0 && _pressure3.swap) pressure.swap();\n      pressureProgram.bind();\n      context.gl.uniform2f(pressureProgram.uniforms.texelSize, (_velocity$texelSizeX4 = (_velocity11 = velocity) === null || _velocity11 === void 0 ? void 0 : _velocity11.texelSizeX) != null ? _velocity$texelSizeX4 : 0, (_velocity$texelSizeY4 = (_velocity12 = velocity) === null || _velocity12 === void 0 ? void 0 : _velocity12.texelSizeY) != null ? _velocity$texelSizeY4 : 0);\n      if ((_divergence = divergence) !== null && _divergence !== void 0 && _divergence.attach) context.gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));\n\n      for (var i = 0; i < GL_CONFIGS.PRESSURE_ITERATIONS; i++) {\n        var _pressure4, _pressure4$read;\n\n        if (pressure.read && pressure.read.attach) context.gl.uniform1i(pressureProgram.uniforms.uPressure, (_pressure4 = pressure) !== null && _pressure4 !== void 0 && (_pressure4$read = _pressure4.read) !== null && _pressure4$read !== void 0 && _pressure4$read.attach ? pressure.read.attach(1) : 1);\n        if (pressure.write) blit(pressure.write);\n        if (pressure.swap) pressure.swap();\n      }\n\n      gradientSubtractProgram.bind();\n      context.gl.uniform2f(gradientSubtractProgram.uniforms.texelSize, (_velocity$texelSizeX5 = (_velocity13 = velocity) === null || _velocity13 === void 0 ? void 0 : _velocity13.texelSizeX) != null ? _velocity$texelSizeX5 : 0, (_velocity$texelSizeY5 = (_velocity14 = velocity) === null || _velocity14 === void 0 ? void 0 : _velocity14.texelSizeY) != null ? _velocity$texelSizeY5 : 0);\n      context.gl.uniform1i(gradientSubtractProgram.uniforms.uPressure, (_pressure5 = pressure) !== null && _pressure5 !== void 0 && (_pressure5$read = _pressure5.read) !== null && _pressure5$read !== void 0 && _pressure5$read.attach ? pressure.read.attach(0) : 0);\n      context.gl.uniform1i(gradientSubtractProgram.uniforms.uVelocity, (_velocity15 = velocity) !== null && _velocity15 !== void 0 && (_velocity15$read = _velocity15.read) !== null && _velocity15$read !== void 0 && _velocity15$read.attach ? velocity.read.attach(1) : 1);\n      if ((_velocity16 = velocity) !== null && _velocity16 !== void 0 && _velocity16.write) blit(velocity.write);\n      if ((_velocity17 = velocity) !== null && _velocity17 !== void 0 && _velocity17.swap) velocity.swap();\n      advectionProgram.bind();\n      context.gl.uniform2f(advectionProgram.uniforms.texelSize, (_velocity$texelSizeX6 = (_velocity18 = velocity) === null || _velocity18 === void 0 ? void 0 : _velocity18.texelSizeX) != null ? _velocity$texelSizeX6 : 0, (_velocity$texelSizeY6 = (_velocity19 = velocity) === null || _velocity19 === void 0 ? void 0 : _velocity19.texelSizeY) != null ? _velocity$texelSizeY6 : 0);\n      if (!context.ext.supportLinearFiltering) context.gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, (_velocity$texelSizeX7 = (_velocity20 = velocity) === null || _velocity20 === void 0 ? void 0 : _velocity20.texelSizeX) != null ? _velocity$texelSizeX7 : 0, (_velocity$texelSizeY7 = (_velocity21 = velocity) === null || _velocity21 === void 0 ? void 0 : _velocity21.texelSizeY) != null ? _velocity$texelSizeY7 : 0);\n      var velocityId = (_velocity22 = velocity) !== null && _velocity22 !== void 0 && (_velocity22$read = _velocity22.read) !== null && _velocity22$read !== void 0 && _velocity22$read.attach ? velocity.read.attach(0) : 0;\n      context.gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\n      context.gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\n      context.gl.uniform1f(advectionProgram.uniforms.dt, dt);\n      context.gl.uniform1f(advectionProgram.uniforms.dissipation, GL_CONFIGS.VELOCITY_DISSIPATION);\n      if ((_velocity23 = velocity) !== null && _velocity23 !== void 0 && _velocity23.write) blit(velocity.write);\n      if ((_velocity24 = velocity) !== null && _velocity24 !== void 0 && _velocity24.swap) velocity.swap();\n      if (!context.ext.supportLinearFiltering) context.gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, (_dye$texelSizeX = (_dye = dye) === null || _dye === void 0 ? void 0 : _dye.texelSizeX) != null ? _dye$texelSizeX : 0, (_dye$texelSizeY = (_dye2 = dye) === null || _dye2 === void 0 ? void 0 : _dye2.texelSizeY) != null ? _dye$texelSizeY : 0);\n      context.gl.uniform1i(advectionProgram.uniforms.uVelocity, (_velocity25 = velocity) !== null && _velocity25 !== void 0 && (_velocity25$read = _velocity25.read) !== null && _velocity25$read !== void 0 && _velocity25$read.attach ? velocity.read.attach(0) : 0);\n      context.gl.uniform1i(advectionProgram.uniforms.uSource, (_dye3 = dye) !== null && _dye3 !== void 0 && (_dye3$read = _dye3.read) !== null && _dye3$read !== void 0 && _dye3$read.attach ? dye.read.attach(1) : 1);\n      context.gl.uniform1f(advectionProgram.uniforms.dissipation, GL_CONFIGS.DENSITY_DISSIPATION);\n      if ((_dye4 = dye) !== null && _dye4 !== void 0 && _dye4.write) blit(dye.write);\n      if ((_dye5 = dye) !== null && _dye5 !== void 0 && _dye5.swap) dye.swap();\n    };\n\n    var render = function render(target) {\n      var _dye6;\n\n      if (GL_CONFIGS.BLOOM && (_dye6 = dye) !== null && _dye6 !== void 0 && _dye6.read) applyBloom(dye.read, bloom);\n\n      if (GL_CONFIGS.SUNRAYS) {\n        var _dye7, _dye8;\n\n        if ((_dye7 = dye) !== null && _dye7 !== void 0 && _dye7.read && (_dye8 = dye) !== null && _dye8 !== void 0 && _dye8.write) applySunrays(dye.read, dye.write, sunrays);\n        blur(sunrays, sunraysTemp, 1);\n      }\n\n      if (!target || !GL_CONFIGS.TRANSPARENT) {\n        context.gl.blendFunc(context.gl.ONE, context.gl.ONE_MINUS_SRC_ALPHA);\n        context.gl.enable(context.gl.BLEND);\n      } else {\n        context.gl.disable(context.gl.BLEND);\n      }\n\n      if (!GL_CONFIGS.TRANSPARENT) drawColor(target, normalizeColor(GL_CONFIGS.BACK_COLOR));\n      if (!target && GL_CONFIGS.TRANSPARENT) drawCheckerboard(target);\n      drawDisplay(target);\n    };\n\n    var drawColor = function drawColor(target, color) {\n      colorProgram.bind();\n      context.gl.uniform4f(colorProgram.uniforms.color, color.r, color.g, color.b, 1);\n      blit(target);\n    };\n\n    var drawCheckerboard = function drawCheckerboard(target) {\n      if (!canvas) return;\n      checkerboardProgram.bind();\n      context.gl.uniform1f(checkerboardProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n      blit(target);\n    };\n\n    var drawDisplay = function drawDisplay(target) {\n      var _ref7, _ref8, _dye9, _dye9$read, _sunrays;\n\n      var width = (_ref7 = !target ? context.gl.drawingBufferWidth : target.width) != null ? _ref7 : 1;\n      var height = (_ref8 = !target ? context.gl.drawingBufferHeight : target.height) != null ? _ref8 : 1;\n      displayMaterial.bind();\n      if (GL_CONFIGS.SHADING) context.gl.uniform2f(displayMaterial.uniforms.texelSize, 1.0 / width, 1.0 / height);\n      context.gl.uniform1i(displayMaterial.uniforms.uTexture, (_dye9 = dye) !== null && _dye9 !== void 0 && (_dye9$read = _dye9.read) !== null && _dye9$read !== void 0 && _dye9$read.attach ? dye.read.attach(0) : 0);\n\n      if (GL_CONFIGS.BLOOM) {\n        var _bloom;\n\n        context.gl.uniform1i(displayMaterial.uniforms.uBloom, (_bloom = bloom) !== null && _bloom !== void 0 && _bloom.attach ? bloom.attach(1) : 1);\n        context.gl.uniform1i(displayMaterial.uniforms.uDithering, ditheringTexture !== null && ditheringTexture !== void 0 && ditheringTexture.attach ? ditheringTexture.attach(2) : 2);\n        var scale = getTextureScale(ditheringTexture, width, height);\n        context.gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y);\n      }\n\n      if (GL_CONFIGS.SUNRAYS) context.gl.uniform1i(displayMaterial.uniforms.uSunrays, (_sunrays = sunrays) !== null && _sunrays !== void 0 && _sunrays.attach ? sunrays.attach(3) : 3);\n      blit(target);\n    };\n\n    var applyBloom = function applyBloom(source, destination) {\n      var _last$texelSizeX3, _last7, _last$texelSizeY3, _last8, _last9;\n\n      if (bloomFramebuffers.length < 2) return;\n      var last = destination;\n      context.gl.disable(context.gl.BLEND);\n      bloomPrefilterProgram.bind();\n      var knee = GL_CONFIGS.BLOOM_THRESHOLD * GL_CONFIGS.BLOOM_SOFT_KNEE + 0.0001;\n      var curve0 = GL_CONFIGS.BLOOM_THRESHOLD - knee;\n      var curve1 = knee * 2;\n      var curve2 = 0.25 / knee;\n      context.gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2);\n      context.gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, GL_CONFIGS.BLOOM_THRESHOLD);\n      context.gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source !== null && source !== void 0 && source.attach ? source.attach(0) : 0);\n      blit(last);\n      bloomBlurProgram.bind();\n\n      for (var i = 0; i < bloomFramebuffers.length; i++) {\n        var _last$texelSizeX, _last, _last$texelSizeY, _last2, _last3;\n\n        var dest = bloomFramebuffers[i];\n        context.gl.uniform2f(bloomBlurProgram.uniforms.texelSize, (_last$texelSizeX = (_last = last) === null || _last === void 0 ? void 0 : _last.texelSizeX) != null ? _last$texelSizeX : 0, (_last$texelSizeY = (_last2 = last) === null || _last2 === void 0 ? void 0 : _last2.texelSizeY) != null ? _last$texelSizeY : 0);\n        context.gl.uniform1i(bloomBlurProgram.uniforms.uTexture, (_last3 = last) !== null && _last3 !== void 0 && _last3.attach ? last.attach(0) : 0);\n        blit(dest);\n        last = dest;\n      }\n\n      context.gl.blendFunc(context.gl.ONE, context.gl.ONE);\n      context.gl.enable(context.gl.BLEND);\n\n      for (var _i = bloomFramebuffers.length - 2; _i >= 0; _i--) {\n        var _last$texelSizeX2, _last4, _last$texelSizeY2, _last5, _last6, _baseTex$width, _baseTex$height;\n\n        var baseTex = bloomFramebuffers[_i];\n        context.gl.uniform2f(bloomBlurProgram.uniforms.texelSize, (_last$texelSizeX2 = (_last4 = last) === null || _last4 === void 0 ? void 0 : _last4.texelSizeX) != null ? _last$texelSizeX2 : 0, (_last$texelSizeY2 = (_last5 = last) === null || _last5 === void 0 ? void 0 : _last5.texelSizeY) != null ? _last$texelSizeY2 : 0);\n        context.gl.uniform1i(bloomBlurProgram.uniforms.uTexture, (_last6 = last) !== null && _last6 !== void 0 && _last6.attach ? last.attach(0) : 0);\n        context.gl.viewport(0, 0, (_baseTex$width = baseTex.width) != null ? _baseTex$width : 0, (_baseTex$height = baseTex.height) != null ? _baseTex$height : 0);\n        blit(baseTex);\n        last = baseTex;\n      }\n\n      context.gl.disable(context.gl.BLEND);\n      bloomFinalProgram.bind();\n      context.gl.uniform2f(bloomFinalProgram.uniforms.texelSize, (_last$texelSizeX3 = (_last7 = last) === null || _last7 === void 0 ? void 0 : _last7.texelSizeX) != null ? _last$texelSizeX3 : 0, (_last$texelSizeY3 = (_last8 = last) === null || _last8 === void 0 ? void 0 : _last8.texelSizeY) != null ? _last$texelSizeY3 : 0);\n      context.gl.uniform1i(bloomFinalProgram.uniforms.uTexture, (_last9 = last) !== null && _last9 !== void 0 && _last9.attach ? last.attach(0) : 0);\n      context.gl.uniform1f(bloomFinalProgram.uniforms.intensity, GL_CONFIGS.BLOOM_INTENSITY);\n      blit(destination);\n    };\n\n    var applySunrays = function applySunrays(source, mask, destination) {\n      context.gl.disable(context.gl.BLEND);\n      sunraysMaskProgram.bind();\n      context.gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source !== null && source !== void 0 && source.attach ? source.attach(0) : 0);\n      blit(mask);\n      sunraysProgram.bind();\n      context.gl.uniform1f(sunraysProgram.uniforms.weight, GL_CONFIGS.SUNRAYS_WEIGHT);\n      context.gl.uniform1i(sunraysProgram.uniforms.uTexture, mask !== null && mask !== void 0 && mask.attach ? mask.attach(0) : 0);\n      blit(destination);\n    };\n\n    var blur = function blur(target, temp, iterations) {\n      blurProgram.bind();\n\n      for (var i = 0; i < iterations; i++) {\n        var _target$texelSizeX, _target$texelSizeY;\n\n        context.gl.uniform2f(blurProgram.uniforms.texelSize, (_target$texelSizeX = target === null || target === void 0 ? void 0 : target.texelSizeX) != null ? _target$texelSizeX : 0, 0.0);\n        context.gl.uniform1i(blurProgram.uniforms.uTexture, target !== null && target !== void 0 && target.attach ? target.attach(0) : 0);\n        blit(temp);\n        context.gl.uniform2f(blurProgram.uniforms.texelSize, 0.0, (_target$texelSizeY = target === null || target === void 0 ? void 0 : target.texelSizeY) != null ? _target$texelSizeY : 0);\n        context.gl.uniform1i(blurProgram.uniforms.uTexture, temp !== null && temp !== void 0 && temp.attach ? temp.attach(0) : 0);\n        blit(target);\n      }\n    };\n\n    function splat(canvas, x, y, dx, dy, color) {\n      var _velocity26, _velocity26$read, _velocity27, _velocity28, _dye10, _dye10$read, _dye11, _dye12;\n\n      splatProgram.bind();\n      context.gl.uniform1i(splatProgram.uniforms.uTarget, (_velocity26 = velocity) !== null && _velocity26 !== void 0 && (_velocity26$read = _velocity26.read) !== null && _velocity26$read !== void 0 && _velocity26$read.attach ? velocity.read.attach(0) : 0);\n      context.gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n      context.gl.uniform2f(splatProgram.uniforms.point, x, y);\n      context.gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0);\n      context.gl.uniform1f(splatProgram.uniforms.radius, correctRadius(canvas, GL_CONFIGS.SPLAT_RADIUS / 100.0));\n      if ((_velocity27 = velocity) !== null && _velocity27 !== void 0 && _velocity27.write) blit(velocity.write);\n      if ((_velocity28 = velocity) !== null && _velocity28 !== void 0 && _velocity28.swap) velocity.swap();\n      context.gl.uniform1i(splatProgram.uniforms.uTarget, (_dye10 = dye) !== null && _dye10 !== void 0 && (_dye10$read = _dye10.read) !== null && _dye10$read !== void 0 && _dye10$read.attach ? dye.read.attach(0) : 0);\n      context.gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\n      if ((_dye11 = dye) !== null && _dye11 !== void 0 && _dye11.write) blit(dye.write);\n      if ((_dye12 = dye) !== null && _dye12 !== void 0 && _dye12.swap) dye.swap();\n    }\n\n    var splatPointer = function splatPointer(pointer) {\n      var dx = pointer.deltaX * GL_CONFIGS.SPLAT_FORCE;\n      var dy = pointer.deltaY * GL_CONFIGS.SPLAT_FORCE;\n      splat(canvas, pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n    };\n\n    function multipleSplats(canvas, amount) {\n      if (amount === void 0) {\n        amount = 0;\n      }\n\n      for (var i = 0; i < amount; i++) {\n        var color = generateColor();\n        color.r *= 10.0;\n        color.g *= 10.0;\n        color.b *= 10.0;\n        var x = Math.random();\n        var y = Math.random();\n        var dx = 1000 * (Math.random() - 0.5);\n        var dy = 1000 * (Math.random() - 0.5);\n        splat(canvas, x, y, dx, dy, color);\n      }\n    }\n\n    function correctRadius(canvas, radius) {\n      var aspectRatio = canvas.width / canvas.height;\n      if (aspectRatio > 1) radius *= aspectRatio;\n      return radius;\n    }\n\n    window.addEventListener('mousedown', function (e) {\n      var rect = canvas.getBoundingClientRect();\n      var posX = scaleByPixelRatio(e.clientX - rect.x);\n      var posY = scaleByPixelRatio(e.clientY - rect.y);\n      var pointer = pointers.find(function (p) {\n        return p.id === -1;\n      });\n      if (!pointer) pointer = new Pointer();\n      updatePointerDownData(pointer, -1, posX, posY);\n    }, {\n      passive: false\n    });\n    window.addEventListener('mousemove', function (e) {\n      var pointer = pointers[0];\n      if (!pointer.down) return;\n      var rect = canvas.getBoundingClientRect();\n      var posX = scaleByPixelRatio(e.clientX - rect.x);\n      var posY = scaleByPixelRatio(e.clientY - rect.y);\n      updatePointerMoveData(pointer, posX, posY);\n    }, {\n      passive: false\n    });\n    window.addEventListener('mouseup', function () {\n      updatePointerUpData(pointers[0]);\n    }, {\n      passive: false\n    });\n    window.addEventListener('touchstart', function (e) {\n      if (/Mui(?:Backdrop|(?:Icon)?Button|Card|Typography)/i.test(e.target.className)) return;\n      e.preventDefault();\n      var touches = e.targetTouches;\n\n      while (touches.length >= pointers.length) {\n        pointers.push(new Pointer());\n      }\n\n      var rect = canvas.getBoundingClientRect();\n\n      for (var i = 0; i < touches.length; i++) {\n        var posX = scaleByPixelRatio(touches[i].clientX - rect.x);\n        var posY = scaleByPixelRatio(touches[i].clientY - rect.y);\n        updatePointerDownData(pointers[i + 1], touches[i].identifier, posX, posY);\n      }\n    }, {\n      passive: false\n    });\n    window.addEventListener('touchmove', function (e) {\n      if (/Mui(?:Backdrop|(?:Icon)?Button|Card|Typography)/i.test(e.target.className)) return;\n      e.preventDefault();\n      var touches = e.targetTouches;\n      var rect = canvas.getBoundingClientRect();\n\n      for (var i = 0; i < touches.length; i++) {\n        var pointer = pointers[i + 1];\n        if (!pointer.down) continue;\n        var posX = scaleByPixelRatio(touches[i].clientX - rect.x);\n        var posY = scaleByPixelRatio(touches[i].clientY - rect.y);\n        updatePointerMoveData(pointer, posX, posY);\n      }\n    }, {\n      passive: false\n    });\n    window.addEventListener('touchend', function (e) {\n      var touches = e.changedTouches;\n\n      var _loop = function _loop(i) {\n        var pointer = pointers.find(function (p) {\n          return p.id === touches[i].identifier;\n        });\n        if (!pointer) return \"continue\";\n        updatePointerUpData(pointer);\n      };\n\n      for (var i = 0; i < touches.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"continue\") continue;\n      }\n    }, {\n      passive: false\n    });\n    window.addEventListener('keydown', function (e) {\n      if (e.code === 'KeyP') GL_CONFIGS.PAUSED = !GL_CONFIGS.PAUSED;\n      if (e.key === ' ') splatStack.push(typeof GL_CONFIGS.SPLAT_COUNT === 'number' ? GL_CONFIGS.SPLAT_COUNT : GL_CONFIGS.SPLAT_COUNT());\n    });\n    var resizeTimeout;\n    window.addEventListener('resize', function () {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(function () {\n        resizeCanvas(canvas);\n        initFramebuffers();\n      }, GL_CONFIGS.RESIZE_DELAY);\n    });\n\n    var updatePointerDownData = function updatePointerDownData(pointer, id, posX, posY) {\n      pointer.id = id;\n      pointer.down = true;\n      pointer.moved = false;\n      pointer.texcoordX = posX / canvas.width;\n      pointer.texcoordY = 1.0 - posY / canvas.height;\n      pointer.prevTexcoordX = pointer.texcoordX;\n      pointer.prevTexcoordY = pointer.texcoordY;\n      pointer.deltaX = 0;\n      pointer.deltaY = 0;\n      pointer.color = generateColor();\n    };\n\n    var updatePointerMoveData = function updatePointerMoveData(pointer, posX, posY) {\n      pointer.prevTexcoordX = pointer.texcoordX;\n      pointer.prevTexcoordY = pointer.texcoordY;\n      pointer.texcoordX = posX / canvas.width;\n      pointer.texcoordY = 1.0 - posY / canvas.height;\n      pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX);\n      pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY);\n      pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n    };\n\n    var updatePointerUpData = function updatePointerUpData(pointer) {\n      pointer.down = false;\n    };\n\n    var correctDeltaX = function correctDeltaX(delta) {\n      var aspectRatio = canvas.width / canvas.height;\n      if (aspectRatio < 1) delta *= aspectRatio;\n      return delta;\n    };\n\n    var correctDeltaY = function correctDeltaY(delta) {\n      var aspectRatio = canvas.width / canvas.height;\n      if (aspectRatio > 1) delta /= aspectRatio;\n      return delta;\n    };\n\n    var update = function update() {\n      var dt = calcDeltaTime();\n      updateColors(dt);\n      applyInputs();\n      if (!GL_CONFIGS.PAUSED) step(dt);\n      render(null);\n      requestAnimationFrame(update);\n    };\n\n    resizeCanvas(canvas);\n    update();\n    setInterval(function () {\n      if (splatStack.length > 0) return;\n      splatStack.push(typeof GL_CONFIGS.SPLAT_COUNT === 'number' ? GL_CONFIGS.SPLAT_COUNT : GL_CONFIGS.SPLAT_COUNT());\n    }, GL_CONFIGS.SPLAT_RATE);\n  }, [canvas]);\n  return React.createElement(StyledCanvas, {\n    ref: refCanvas,\n    fixed: fixed\n  });\n}\n\nexport default WebGLFluidSim;\nexport { GL_CONFIGS };","map":{"version":3,"mappings":"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","names":["Pointer","id","_ref$id","texcoordX","_ref$texcoordX","texcoordY","_ref$texcoordY","prevTexcoordX","_ref$prevTexcoordX","prevTexcoordY","_ref$prevTexcoordY","deltaX","_ref$deltaX","deltaY","_ref$deltaY","down","_ref$down","moved","_ref$moved","color","r","g","b","getWebGLContext","canvas","params","alpha","depth","stencil","antialias","preserveDrawingBuffer","gl","getContext","isWebGL2","halfFloat","HALF_FLOAT_OES","supportLinearFiltering","getExtension","_gl2","_gl3","_gl4","clearColor","halfFloatTexType","HALF_FLOAT","_halfFloat","formatRGBA","formatRG","formatR","getSupportedFormat","RGBA16F","RGBA","RG16F","RG","R16F","RED","obj","WebGLRenderingContextWithExtensions","internalFormat","format","type","supportRenderTextureFormat","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","hashCode","s","length","hash","i","charCodeAt","getTextureScale","width","height","x","y","generateColor","c","HSVtoRGB","Math","random","h","v","floor","f","p","q","t","normalizeColor","output","wrap","value","min","max","range","Program","vertexShader","fragmentShader","compileShaderOfType","FRAGMENT_SHADER","program","createProgramFromShader","uniforms","getUniforms","_proto","bind","useProgram","Material","_inheritsLoose","fragmentShaderSource","_this","programs","_proto2","setKeywords","keywords","map","keyword","reduce","prev","curr","ext","_proto3","source","join","shader","createShader","Error","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","trace","getShaderInfoLog","uniformCount","getProgramParameter","ACTIVE_UNIFORMS","uniformName","getActiveUniform","_this$gl$getActiveUni","name","error","uniform","getUniformLocation","createProgram","attachShader","linkProgram","LINK_STATUS","getProgramInfoLog","getResolution","resolution","aspectRatio","drawingBufferWidth","drawingBufferHeight","round","_createClass","key","get","VERTEX_SHADER","StyledCanvas","styled","_templateObject","fixed","scaleByPixelRatio","input","window","devicePixelRatio","resizeCanvas","clientWidth","clientHeight","isMobile","test","navigator","userAgent","GL_CONFIGS","SIM_RESOLUTION","DYE_RESOLUTION","CAPTURE_RESOLUTION","DENSITY_DISSIPATION","VELOCITY_DISSIPATION","PRESSURE","PRESSURE_ITERATIONS","CURL","SPLAT_RADIUS","SPLAT_FORCE","SHADING","COLORFUL","COLOR_UPDATE_SPEED","PAUSED","BACK_COLOR","TRANSPARENT","BLOOM","BLOOM_ITERATIONS","BLOOM_RESOLUTION","BLOOM_INTENSITY","BLOOM_THRESHOLD","BLOOM_SOFT_KNEE","RESIZE_DELAY","SPLAT_COUNT","SPLAT_RATE","SUNRAYS","SUNRAYS_RESOLUTION","SUNRAYS_WEIGHT","WebGLFluidSim","_ref2$fixed","refCanvas","React","useRef","useState","setCanvas","useEffect","current","context","pointers","splatStack","push","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","target","clear","viewport","COLOR_BUFFER_BIT","drawElements","TRIANGLES","UNSIGNED_SHORT","dye","velocity","divergence","curl","pressure","bloom","bloomFramebuffers","sunrays","sunraysTemp","ditheringTexture","createTextureAsync","blurProgram","blurVertexShader","blurShader","copyProgram","baseVertexShader","copyShader","clearProgram","clearShader","colorProgram","colorShader","checkerboardProgram","checkerboardShader","bloomPrefilterProgram","bloomPrefilterShader","bloomBlurProgram","bloomBlurShader","bloomFinalProgram","bloomFinalShader","sunraysMaskProgram","sunraysMaskShader","sunraysProgram","sunraysShader","splatProgram","splatShader","advectionProgram","advectionShader","divergenceProgram","divergenceShader","curlProgram","curlShader","vorticityProgram","vorticityShader","pressureProgram","pressureShader","gradientSubtractProgram","gradientSubtractShader","displayMaterial","displayShaderSource","initFramebuffers","simRes","dyeRes","texType","rgba","rg","filtering","LINEAR","disable","BLEND","createDoubleFBO","resizeDoubleFBO","createFBO","initBloomFramebuffers","initSunraysFramebuffers","res","w","param","activeTexture","TEXTURE0","texelSizeX","texelSizeY","attach","fbo1","fbo2","_fbo","_fbo2","read","write","swap","temp","resizeFBO","newFBO","uniform1i","uTexture","url","REPEAT","RGB","UNSIGNED_BYTE","Uint8Array","image","Image","onload","src","updateKeywords","displayKeywords","multipleSplats","lastUpdateTime","Date","now","colorUpdateTimer","calcDeltaTime","dt","updateColors","forEach","applyInputs","pop","splatPointer","step","uniform2f","texelSize","_velocity","_velocity2","uVelocity","_velocity4","_velocity5","_curl","uCurl","uniform1f","_velocity7","_velocity8","_velocity9","_pressure2","_pressure3","_velocity11","_velocity12","_divergence","uDivergence","uPressure","_velocity13","_velocity14","_velocity16","_velocity17","_velocity18","_velocity19","dyeTexelSize","_velocity20","_velocity21","velocityId","uSource","dissipation","_velocity23","_velocity24","_dye","_dye2","_dye4","_dye5","render","_dye6","applyBloom","_dye8","applySunrays","blur","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","drawColor","drawCheckerboard","drawDisplay","uniform4f","uBloom","uDithering","scale","ditherScale","uSunrays","destination","last","knee","curve0","curve1","curve2","uniform3f","curve","threshold","dest","_last","_last2","baseTex","_last4","_last5","_last7","_last8","intensity","mask","weight","iterations","splat","dx","dy","uTarget","point","radius","correctRadius","_velocity27","_velocity28","_dye11","_dye12","pointer","amount","addEventListener","e","rect","getBoundingClientRect","posX","clientX","posY","clientY","find","updatePointerDownData","passive","updatePointerMoveData","updatePointerUpData","className","preventDefault","touches","targetTouches","identifier","changedTouches","code","resizeTimeout","clearTimeout","setTimeout","correctDeltaX","correctDeltaY","abs","delta","update","requestAnimationFrame","setInterval","ref"],"sources":["../src/types/webgl.ts","../src/components/webgl.ts","../src/index.tsx"],"sourcesContent":["export interface IPointer {\n  id: number;\n  texcoordX: number;\n  texcoordY: number;\n  prevTexcoordX: number;\n  prevTexcoordY: number;\n  deltaX: number;\n  deltaY: number;\n  down: boolean;\n  moved: boolean;\n  color: ColorLike;\n}\n\nexport class Pointer implements IPointer {\n  id: number;\n  texcoordX: number;\n  texcoordY: number;\n  prevTexcoordX: number;\n  prevTexcoordY: number;\n  deltaX: number;\n  deltaY: number;\n  down: boolean;\n  moved: boolean;\n  color: ColorLike;\n\n  constructor({\n    id = -1,\n    texcoordX = 0,\n    texcoordY = 0,\n    prevTexcoordX = 0,\n    prevTexcoordY = 0,\n    deltaX = 0,\n    deltaY = 0,\n    down = false,\n    moved = false,\n    color = { r: 30, g: 0, b: 300 },\n  }: Partial<IPointer> = {}) {\n    this.id = id;\n    this.texcoordX = texcoordX;\n    this.texcoordY = texcoordY;\n    this.prevTexcoordX = prevTexcoordX;\n    this.prevTexcoordY = prevTexcoordY;\n    this.deltaX = deltaX;\n    this.deltaY = deltaY;\n    this.down = down;\n    this.moved = moved;\n    this.color = color;\n  }\n}\n\nexport type WebGLSupportedFormat = {\n  readonly internalFormat: number;\n  readonly format: number;\n};\n\nexport type WebGLExtensionSupport = {\n  formatRGBA?: WebGLSupportedFormat | null;\n  formatRG?: WebGLSupportedFormat | null;\n  formatR?: WebGLSupportedFormat | null;\n  halfFloatTexType?: number;\n  supportLinearFiltering?: OES_texture_float | null;\n};\n\nexport type WebGLResolution = {\n  width: number;\n  height: number;\n};\n\nexport type WebGLShaderCompiler = {\n  compileShaderOfType(type: number, source: string, keywords?: string[]): WebGLShader | null;\n  getUniforms(program: WebGLProgram): Record<string, WebGLUniformLocation>;\n  createProgramFromShader(vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram | null;\n  getResolution(resolution: number): WebGLResolution;\n  readonly baseVertexShader: WebGLShader | null;\n  readonly blurVertexShader: WebGLShader | null;\n  readonly blurShader: WebGLShader | null;\n  readonly copyShader: WebGLShader | null;\n  readonly clearShader: WebGLShader | null;\n  readonly colorShader: WebGLShader | null;\n  readonly checkerboardShader: WebGLShader | null;\n  readonly displayShaderSource: WebGLShader | null;\n  readonly bloomPrefilterShader: WebGLShader | null;\n  readonly bloomBlurShader: WebGLShader | null;\n  readonly bloomFinalShader: WebGLShader | null;\n  readonly sunraysMaskShader: WebGLShader | null;\n  readonly sunraysShader: WebGLShader | null;\n  readonly splatShader: WebGLShader | null;\n  readonly advectionShader: WebGLShader | null;\n  readonly divergenceShader: WebGLShader | null;\n  readonly curlShader: WebGLShader | null;\n  readonly vorticityShader: WebGLShader | null;\n  readonly pressureShader: WebGLShader | null;\n  readonly gradientSubtractShader: WebGLShader | null;\n};\n\nexport type WebGLFBO = {\n  texture?: WebGLTexture | null;\n  fbo?: WebGLFramebuffer | null;\n  width?: number | null;\n  height?: number | null;\n  texelSizeX?: number | null;\n  texelSizeY?: number | null;\n  attach?(id: number): number;\n  read?: WebGLFBO;\n  write?: WebGLFBO;\n  swap?(): void;\n};\n\nexport type ColorLike = { r: number; g: number; b: number } | { r: number; g: number; b: number; a: number };\n","import { ColorLike, WebGLFBO, WebGLSupportedFormat, WebGLExtensionSupport, WebGLShaderCompiler } from '../types';\n\nexport function getWebGLContext(canvas?: HTMLCanvasElement): WebGLRenderingContextWithExtensions {\n  const params: WebGLContextAttributes = {\n    alpha: true,\n    depth: false,\n    stencil: false,\n    antialias: false,\n    preserveDrawingBuffer: false,\n  };\n\n  let gl = canvas?.getContext('webgl2', params) as WebGL2RenderingContext;\n  const isWebGL2 = !!gl;\n  if (!isWebGL2) {\n    gl = (canvas?.getContext('webgl', params) ||\n      canvas?.getContext('experimental-webgl', params)) as WebGL2RenderingContext;\n  }\n\n  let halfFloat: OES_texture_half_float | null = { HALF_FLOAT_OES: 0 };\n  let supportLinearFiltering: OES_texture_float | null;\n  if (isWebGL2) {\n    gl?.getExtension('EXT_color_buffer_float');\n    supportLinearFiltering = gl?.getExtension('OES_texture_float_linear');\n  } else {\n    halfFloat = gl?.getExtension('OES_texture_half_float');\n    supportLinearFiltering = gl?.getExtension('OES_texture_half_float_linear');\n  }\n\n  gl?.clearColor(0.0, 0.0, 0.0, 1.0);\n\n  let halfFloatTexType: number = 0;\n  if (isWebGL2 || halfFloat) halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat?.HALF_FLOAT_OES ?? 0;\n\n  let formatRGBA: WebGLSupportedFormat | null;\n  let formatRG: WebGLSupportedFormat | null;\n  let formatR: WebGLSupportedFormat | null;\n\n  if (isWebGL2) {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n  } else {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n  }\n\n  const obj = new WebGLRenderingContextWithExtensions(gl, {\n    formatRGBA,\n    formatRG,\n    formatR,\n    halfFloatTexType,\n    supportLinearFiltering,\n  });\n\n  return obj;\n}\n\nexport function getSupportedFormat(\n  gl: WebGL2RenderingContext,\n  internalFormat: GLenum,\n  format: number = 0,\n  type: number = 0,\n): WebGLSupportedFormat | null {\n  if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n    switch (internalFormat) {\n      case gl.R16F:\n        return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n      case gl.RG16F:\n        return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n      default:\n        return null;\n    }\n  }\n  return {\n    internalFormat,\n    format,\n  };\n}\n\nexport function supportRenderTextureFormat(\n  gl: WebGL2RenderingContext,\n  internalFormat: GLenum,\n  format: number = 0,\n  type: number = 0,\n) {\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\n  const fbo = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\nexport function clamp01(input: number) {\n  return Math.min(Math.max(input, 0), 1);\n}\n\nexport function hashCode(s: string) {\n  if (s.length === 0) return 0;\n  let hash = 0;\n  for (let i = 0; i < s.length; i++) {\n    hash = (hash << 5) - hash + s.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nexport function getTextureScale(texture: WebGLFBO, width: number, height: number) {\n  return {\n    x: width / (texture.width ?? 1),\n    y: height / (texture.height ?? 1),\n  };\n}\n\nexport function generateColor() {\n  let c = HSVtoRGB(Math.random(), 1.0, 1.0);\n  c.r *= 0.15;\n  c.g *= 0.15;\n  c.b *= 0.15;\n  return c;\n}\n\nexport function HSVtoRGB(h: number, s: number, v: number): ColorLike {\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      return { r: v, g: t, b: p };\n    case 1:\n      return { r: q, g: v, b: p };\n    case 2:\n      return { r: p, g: v, b: t };\n    case 3:\n      return { r: p, g: q, b: v };\n    case 4:\n      return { r: t, g: p, b: v };\n    case 5:\n      return { r: v, g: p, b: q };\n  }\n  return { r: 0, g: 0, b: 0 };\n}\n\nexport function normalizeColor(color: ColorLike) {\n  let output: ColorLike = {\n    r: color.r / 255,\n    g: color.g / 255,\n    b: color.b / 255,\n  };\n  return output;\n}\n\nexport function wrap(value: number, min: number, max: number) {\n  let range = max - min;\n  if (range === 0) return min;\n  return ((value - min) % range) + min;\n}\n\nexport class Program {\n  gl: WebGLRenderingContextWithExtensions;\n\n  program: WebGLProgram;\n  vertexShader: WebGLShader;\n  fragmentShader: WebGLShader;\n  uniforms: Record<string, WebGLUniformLocation>;\n\n  constructor(\n    gl: WebGLRenderingContextWithExtensions,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader | string,\n  ) {\n    this.gl = gl;\n    if (typeof fragmentShader === 'string') {\n      fragmentShader = gl.compileShaderOfType(gl.gl.FRAGMENT_SHADER, fragmentShader);\n    }\n    const program = gl.createProgramFromShader(vertexShader, fragmentShader);\n    this.program = program;\n    this.uniforms = gl.getUniforms(program);\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n  }\n\n  bind() {\n    if (!this.program) return;\n    this.gl.gl.useProgram(this.program);\n  }\n}\n\nexport class Material extends Program {\n  fragmentShaderSource: string = '';\n  programs: WebGLProgram[];\n\n  constructor(\n    gl: WebGLRenderingContextWithExtensions,\n    vertexShader: WebGLShader,\n    fragmentShaderSource: WebGLShader | string,\n  ) {\n    super(gl, vertexShader, fragmentShaderSource);\n    this.vertexShader = vertexShader;\n    if (typeof fragmentShaderSource === 'string') this.fragmentShaderSource = fragmentShaderSource;\n    this.programs = [];\n  }\n\n  setKeywords(...keywords: string[]) {\n    const hash =\n      keywords.length > 0 ? keywords.map((keyword) => hashCode(keyword)).reduce((prev, curr) => prev + curr) : 0;\n    if (!this.programs[hash]) {\n      let fragmentShader = this.gl.compileShaderOfType(this.gl.gl.FRAGMENT_SHADER, this.fragmentShaderSource, keywords);\n      if (fragmentShader) {\n        const program = this.gl.createProgramFromShader(this.vertexShader, fragmentShader);\n        if (program) this.programs[hash] = program;\n      }\n    }\n    let program = this.programs[hash];\n    if (program === this.program) return;\n    this.uniforms = this.gl.getUniforms(program);\n    this.program = program;\n  }\n}\n\nexport class WebGLRenderingContextWithExtensions implements WebGLShaderCompiler {\n  gl: WebGLRenderingContext & WebGL2RenderingContext;\n  ext: WebGLExtensionSupport;\n\n  constructor(gl: WebGLRenderingContext & WebGL2RenderingContext, ext: WebGLExtensionSupport = {}) {\n    this.gl = gl;\n    this.ext = ext;\n  }\n\n  compileShaderOfType(type: number, source: string, keywords: string[] = []) {\n    source = [...keywords.map((keyword) => `#define ${keyword}`), source].join('\\n');\n    const shader = this.gl.createShader(type);\n    if (!shader) {\n      throw new Error('error creating shader');\n    }\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) console.trace(this.gl.getShaderInfoLog(shader));\n    return shader;\n  }\n\n  getUniforms(program: WebGLProgram) {\n    const uniforms: Record<string, WebGLUniformLocation> = {};\n    const uniformCount = this.gl.getProgramParameter(program, this.gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; i++) {\n      const uniformName = this.gl.getActiveUniform(program, i)?.name;\n      if (!uniformName) {\n        console.error('error generating uniform');\n        continue;\n      }\n      const uniform = this.gl.getUniformLocation(program, uniformName);\n      if (!uniform) {\n        console.error('error generating uniform location');\n        continue;\n      }\n      uniforms[uniformName] = uniform;\n    }\n    return uniforms;\n  }\n\n  createProgramFromShader(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n    const program = this.gl.createProgram();\n    if (!program) {\n      throw new Error('error creating program');\n    }\n    this.gl.attachShader(program, vertexShader);\n    this.gl.attachShader(program, fragmentShader);\n    this.gl.linkProgram(program);\n    if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) console.trace(this.gl.getProgramInfoLog(program));\n    return program;\n  }\n\n  getResolution(resolution: number) {\n    let aspectRatio = this.gl.drawingBufferWidth / this.gl.drawingBufferHeight;\n    if (aspectRatio < 1) aspectRatio = 1.0 / aspectRatio;\n\n    let min = Math.round(resolution);\n    let max = Math.round(resolution * aspectRatio);\n\n    if (this.gl.drawingBufferWidth > this.gl.drawingBufferHeight) return { width: max, height: min };\n    else return { width: min, height: max };\n  }\n\n  get baseVertexShader() {\n    return this.compileShaderOfType(\n      this.gl.VERTEX_SHADER,\n      `\n      precision highp float;\n\n      attribute vec2 aPosition;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform vec2 texelSize;\n\n      void main () {\n          vUv = aPosition * 0.5 + 0.5;\n          vL = vUv - vec2(texelSize.x, 0.0);\n          vR = vUv + vec2(texelSize.x, 0.0);\n          vT = vUv + vec2(0.0, texelSize.y);\n          vB = vUv - vec2(0.0, texelSize.y);\n          gl_Position = vec4(aPosition, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n\n  get blurVertexShader() {\n    return this.compileShaderOfType(\n      this.gl.VERTEX_SHADER,\n      `\n      precision highp float;\n\n      attribute vec2 aPosition;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      uniform vec2 texelSize;\n\n      void main () {\n          vUv = aPosition * 0.5 + 0.5;\n          float offset = 1.33333333;\n          vL = vUv - texelSize * offset;\n          vR = vUv + texelSize * offset;\n          gl_Position = vec4(aPosition, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n\n  get blurShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      uniform sampler2D uTexture;\n\n      void main () {\n          vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\n          sum += texture2D(uTexture, vL) * 0.35294117;\n          sum += texture2D(uTexture, vR) * 0.35294117;\n          gl_FragColor = sum;\n      }\n      `,\n    );\n  }\n\n  get copyShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying highp vec2 vUv;\n      uniform sampler2D uTexture;\n\n      void main () {\n          gl_FragColor = texture2D(uTexture, vUv);\n      }\n      `,\n    );\n  }\n\n  get clearShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying highp vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform float value;\n\n      void main () {\n          gl_FragColor = value * texture2D(uTexture, vUv);\n      }\n      `,\n    );\n  }\n\n  get colorShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n\n      uniform vec4 color;\n\n      void main () {\n          gl_FragColor = color;\n      }\n      `,\n    );\n  }\n\n  get checkerboardShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform float aspectRatio;\n\n      #define SCALE 25.0\n\n      void main () {\n          vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n          float v = mod(uv.x + uv.y, 2.0);\n          v = v * 0.1 + 0.8;\n          gl_FragColor = vec4(vec3(v), 1.0);\n      }\n      `,\n    );\n  }\n\n  get displayShaderSource() {\n    return `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uSunrays;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    vec3 linearToGamma (vec3 color) {\n        color = max(color, vec3(0));\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n    }\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n\n    #ifdef SHADING\n        vec3 lc = texture2D(uTexture, vL).rgb;\n        vec3 rc = texture2D(uTexture, vR).rgb;\n        vec3 tc = texture2D(uTexture, vT).rgb;\n        vec3 bc = texture2D(uTexture, vB).rgb;\n\n        float dx = length(rc) - length(lc);\n        float dy = length(tc) - length(bc);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        c *= diffuse;\n    #endif\n\n    #ifdef BLOOM\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n    #endif\n\n    #ifdef SUNRAYS\n        float sunrays = texture2D(uSunrays, vUv).r;\n        c *= sunrays;\n    #ifdef BLOOM\n        bloom *= sunrays;\n    #endif\n    #endif\n\n    #ifdef BLOOM\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 255.0;\n        bloom = linearToGamma(bloom);\n        c += bloom;\n    #endif\n\n        float a = max(c.r, max(c.g, c.b));\n        gl_FragColor = vec4(c, a);\n    }\n    `;\n  }\n\n  get bloomPrefilterShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform vec3 curve;\n      uniform float threshold;\n\n      void main () {\n          vec3 c = texture2D(uTexture, vUv).rgb;\n          float br = max(c.r, max(c.g, c.b));\n          float rq = clamp(br - curve.x, 0.0, curve.y);\n          rq = curve.z * rq * rq;\n          c *= max(rq, br - threshold) / max(br, 0.0001);\n          gl_FragColor = vec4(c, 0.0);\n      }\n      `,\n    );\n  }\n\n  get bloomBlurShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uTexture;\n\n      void main () {\n          vec4 sum = vec4(0.0);\n          sum += texture2D(uTexture, vL);\n          sum += texture2D(uTexture, vR);\n          sum += texture2D(uTexture, vT);\n          sum += texture2D(uTexture, vB);\n          sum *= 0.25;\n          gl_FragColor = sum;\n      }\n      `,\n    );\n  }\n\n  get bloomFinalShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uTexture;\n      uniform float intensity;\n\n      void main () {\n          vec4 sum = vec4(0.0);\n          sum += texture2D(uTexture, vL);\n          sum += texture2D(uTexture, vR);\n          sum += texture2D(uTexture, vT);\n          sum += texture2D(uTexture, vB);\n          sum *= 0.25;\n          gl_FragColor = sum * intensity;\n      }\n      `,\n    );\n  }\n\n  get sunraysMaskShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n\n      void main () {\n          vec4 c = texture2D(uTexture, vUv);\n          float br = max(c.r, max(c.g, c.b));\n          c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\n          gl_FragColor = c;\n      }\n      `,\n    );\n  }\n\n  get sunraysShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform float weight;\n\n      #define ITERATIONS 16\n\n      void main () {\n          float Density = 0.3;\n          float Decay = 0.95;\n          float Exposure = 0.7;\n\n          vec2 coord = vUv;\n          vec2 dir = vUv - 0.5;\n\n          dir *= 1.0 / float(ITERATIONS) * Density;\n          float illuminationDecay = 1.0;\n\n          float color = texture2D(uTexture, vUv).a;\n\n          for (int i = 0; i < ITERATIONS; i++)\n          {\n              coord -= dir;\n              float col = texture2D(uTexture, coord).a;\n              color += col * illuminationDecay * weight;\n              illuminationDecay *= Decay;\n          }\n\n          gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n\n  get splatShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n\n      varying vec2 vUv;\n      uniform sampler2D uTarget;\n      uniform float aspectRatio;\n      uniform vec3 color;\n      uniform vec2 point;\n      uniform float radius;\n\n      void main () {\n          vec2 p = vUv - point.xy;\n          p.x *= aspectRatio;\n          vec3 splat = exp(-dot(p, p) / radius) * color;\n          vec3 base = texture2D(uTarget, vUv).xyz;\n          gl_FragColor = vec4(base + splat, 1.0);\n      }\n      `,\n    );\n  }\n\n  get advectionShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n\n      varying vec2 vUv;\n      uniform sampler2D uVelocity;\n      uniform sampler2D uSource;\n      uniform vec2 texelSize;\n      uniform vec2 dyeTexelSize;\n      uniform float dt;\n      uniform float dissipation;\n\n      vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n          vec2 st = uv / tsize - 0.5;\n\n          vec2 iuv = floor(st);\n          vec2 fuv = fract(st);\n\n          vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n          vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n          vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n          vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n          return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n      }\n\n      void main () {\n      #ifdef MANUAL_FILTERING\n          vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n          vec4 result = bilerp(uSource, coord, dyeTexelSize);\n      #else\n          vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n          vec4 result = texture2D(uSource, coord);\n      #endif\n          float decay = 1.0 + dissipation * dt;\n          gl_FragColor = result / decay;\n      }\n      `,\n      this.ext.supportLinearFiltering ? [] : ['MANUAL_FILTERING'],\n    );\n  }\n\n  get divergenceShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uVelocity;\n\n      void main () {\n          float L = texture2D(uVelocity, vL).x;\n          float R = texture2D(uVelocity, vR).x;\n          float T = texture2D(uVelocity, vT).y;\n          float B = texture2D(uVelocity, vB).y;\n\n          vec2 C = texture2D(uVelocity, vUv).xy;\n          if (vL.x < 0.0) { L = -C.x; }\n          if (vR.x > 1.0) { R = -C.x; }\n          if (vT.y > 1.0) { T = -C.y; }\n          if (vB.y < 0.0) { B = -C.y; }\n\n          float div = 0.5 * (R - L + T - B);\n          gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n\n  get curlShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uVelocity;\n\n      void main () {\n          float L = texture2D(uVelocity, vL).y;\n          float R = texture2D(uVelocity, vR).y;\n          float T = texture2D(uVelocity, vT).x;\n          float B = texture2D(uVelocity, vB).x;\n          float vorticity = R - L - T + B;\n          gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n\n  get vorticityShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uVelocity;\n      uniform sampler2D uCurl;\n      uniform float curl;\n      uniform float dt;\n\n      void main () {\n          float L = texture2D(uCurl, vL).x;\n          float R = texture2D(uCurl, vR).x;\n          float T = texture2D(uCurl, vT).x;\n          float B = texture2D(uCurl, vB).x;\n          float C = texture2D(uCurl, vUv).x;\n\n          vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n          force /= length(force) + 0.0001;\n          force *= curl * C;\n          force.y *= -1.0;\n\n          vec2 velocity = texture2D(uVelocity, vUv).xy;\n          velocity += force * dt;\n          velocity = min(max(velocity, -1000.0), 1000.0);\n          gl_FragColor = vec4(velocity, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n\n  get pressureShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uPressure;\n      uniform sampler2D uDivergence;\n\n      void main () {\n          float L = texture2D(uPressure, vL).x;\n          float R = texture2D(uPressure, vR).x;\n          float T = texture2D(uPressure, vT).x;\n          float B = texture2D(uPressure, vB).x;\n          float C = texture2D(uPressure, vUv).x;\n          float divergence = texture2D(uDivergence, vUv).x;\n          float pressure = (L + R + B + T - divergence) * 0.25;\n          gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n\n  get gradientSubtractShader() {\n    return this.compileShaderOfType(\n      this.gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uPressure;\n      uniform sampler2D uVelocity;\n\n      void main () {\n          float L = texture2D(uPressure, vL).x;\n          float R = texture2D(uPressure, vR).x;\n          float T = texture2D(uPressure, vT).x;\n          float B = texture2D(uPressure, vB).x;\n          vec2 velocity = texture2D(uVelocity, vUv).xy;\n          velocity.xy -= vec2(R - L, T - B);\n          gl_FragColor = vec4(velocity, 0.0, 1.0);\n      }\n      `,\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ColorLike, Pointer, WebGLFBO } from './types';\nimport {\n  Program,\n  Material,\n  getTextureScale,\n  getWebGLContext,\n  generateColor,\n  normalizeColor,\n  wrap,\n} from './components/webgl';\n\nconst StyledCanvas = styled.canvas<Props>`\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  position: ${({ fixed }) => (fixed ? 'fixed' : 'static')};\n`;\n\nfunction scaleByPixelRatio(input: number) {\n  return Math.floor(input * (window.devicePixelRatio || 1));\n}\n\nfunction resizeCanvas(canvas: HTMLCanvasElement) {\n  const width = scaleByPixelRatio(canvas.clientWidth);\n  const height = scaleByPixelRatio(canvas.clientHeight);\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nfunction isMobile() {\n  return /Mobi|Android/i.test(navigator.userAgent);\n}\n\nexport const GL_CONFIGS = {\n  SIM_RESOLUTION: 128,\n  DYE_RESOLUTION: isMobile() ? 512 : 1024,\n  CAPTURE_RESOLUTION: 512,\n  DENSITY_DISSIPATION: 0.7,\n  VELOCITY_DISSIPATION: 0.2,\n  PRESSURE: 0.3,\n  PRESSURE_ITERATIONS: 20,\n  CURL: 30,\n  SPLAT_RADIUS: 0.25,\n  SPLAT_FORCE: 2000,\n  SHADING: true,\n  COLORFUL: true,\n  COLOR_UPDATE_SPEED: 10,\n  PAUSED: false,\n  BACK_COLOR: { r: 0, g: 0, b: 0 },\n  TRANSPARENT: false,\n  BLOOM: true,\n  BLOOM_ITERATIONS: 8,\n  BLOOM_RESOLUTION: 256,\n  BLOOM_INTENSITY: 0.8,\n  BLOOM_THRESHOLD: 0.6,\n  BLOOM_SOFT_KNEE: 0.7,\n  RESIZE_DELAY: 30,\n  SPLAT_COUNT(): number {\n    return Math.floor(Math.random() * 2) + 1;\n  },\n  SPLAT_RATE: 5000,\n  SUNRAYS: true,\n  SUNRAYS_RESOLUTION: 196,\n  SUNRAYS_WEIGHT: 1.0,\n};\n\ntype Props = {\n  fixed?: boolean;\n};\nfunction WebGLFluidSim({ fixed = true }: Props) {\n  //\n\n  const refCanvas = React.useRef<HTMLCanvasElement>(null);\n\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n\n  React.useEffect(() => {\n    const canvas = refCanvas?.current;\n    if (!canvas) return;\n    resizeCanvas(canvas);\n    setCanvas(canvas);\n  }, []);\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    const context = getWebGLContext(canvas);\n\n    const pointers: Pointer[] = [];\n    const splatStack: number[] = [];\n\n    pointers.push(new Pointer());\n\n    const blit = (() => {\n      context.gl.bindBuffer(context.gl.ARRAY_BUFFER, context.gl.createBuffer());\n      context.gl.bufferData(\n        context.gl.ARRAY_BUFFER,\n        new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),\n        context.gl.STATIC_DRAW,\n      );\n      context.gl.bindBuffer(context.gl.ELEMENT_ARRAY_BUFFER, context.gl.createBuffer());\n      context.gl.bufferData(\n        context.gl.ELEMENT_ARRAY_BUFFER,\n        new Uint16Array([0, 1, 2, 0, 2, 3]),\n        context.gl.STATIC_DRAW,\n      );\n      context.gl.vertexAttribPointer(0, 2, context.gl.FLOAT, false, 0, 0);\n      context.gl.enableVertexAttribArray(0);\n      return (target: WebGLFBO | null, clear = false) => {\n        if (!target) {\n          context.gl.viewport(0, 0, context.gl.drawingBufferWidth, context.gl.drawingBufferHeight);\n          context.gl.bindFramebuffer(context.gl.FRAMEBUFFER, null);\n        } else {\n          context.gl.viewport(0, 0, target.width ?? 0, target.height ?? 0);\n          context.gl.bindFramebuffer(context.gl.FRAMEBUFFER, target.fbo ?? null);\n        }\n        if (clear) {\n          context.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n          context.gl.clear(context.gl.COLOR_BUFFER_BIT);\n        }\n        context.gl.drawElements(context.gl.TRIANGLES, 6, context.gl.UNSIGNED_SHORT, 0);\n      };\n    })();\n\n    let dye: WebGLFBO;\n    let velocity: WebGLFBO;\n    let divergence: WebGLFBO;\n    let curl: WebGLFBO;\n    let pressure: WebGLFBO;\n    let bloom: WebGLFBO;\n    let bloomFramebuffers: WebGLFBO[] = [];\n    let sunrays: WebGLFBO;\n    let sunraysTemp: WebGLFBO;\n\n    let ditheringTexture = createTextureAsync('LDR_LLL1_0.png');\n\n    const blurProgram = new Program(context, context.blurVertexShader, context.blurShader);\n    const copyProgram = new Program(context, context.baseVertexShader, context.copyShader);\n    const clearProgram = new Program(context, context.baseVertexShader, context.clearShader);\n    const colorProgram = new Program(context, context.baseVertexShader, context.colorShader);\n    const checkerboardProgram = new Program(context, context.baseVertexShader, context.checkerboardShader);\n    const bloomPrefilterProgram = new Program(context, context.baseVertexShader, context.bloomPrefilterShader);\n    const bloomBlurProgram = new Program(context, context.baseVertexShader, context.bloomBlurShader);\n    const bloomFinalProgram = new Program(context, context.baseVertexShader, context.bloomFinalShader);\n    const sunraysMaskProgram = new Program(context, context.baseVertexShader, context.sunraysMaskShader);\n    const sunraysProgram = new Program(context, context.baseVertexShader, context.sunraysShader);\n    const splatProgram = new Program(context, context.baseVertexShader, context.splatShader);\n    const advectionProgram = new Program(context, context.baseVertexShader, context.advectionShader);\n    const divergenceProgram = new Program(context, context.baseVertexShader, context.divergenceShader);\n    const curlProgram = new Program(context, context.baseVertexShader, context.curlShader);\n    const vorticityProgram = new Program(context, context.baseVertexShader, context.vorticityShader);\n    const pressureProgram = new Program(context, context.baseVertexShader, context.pressureShader);\n    const gradientSubtractProgram = new Program(context, context.baseVertexShader, context.gradientSubtractShader);\n\n    const displayMaterial = new Material(context, context.baseVertexShader, context.displayShaderSource);\n\n    const initFramebuffers = () => {\n      let simRes = context.getResolution(GL_CONFIGS.SIM_RESOLUTION);\n      let dyeRes = context.getResolution(GL_CONFIGS.DYE_RESOLUTION);\n\n      const texType = context.ext.halfFloatTexType;\n      const rgba = context.ext.formatRGBA;\n      const rg = context.ext.formatRG;\n      const r = context.ext.formatR;\n      const filtering = context.ext.supportLinearFiltering ? context.gl.LINEAR : context.gl.NEAREST;\n\n      context.gl.disable(context.gl.BLEND);\n\n      if (!dye)\n        dye = createDoubleFBO(\n          dyeRes.width,\n          dyeRes.height,\n          rgba?.internalFormat ?? 0,\n          rgba?.format ?? 0,\n          texType ?? 0,\n          filtering,\n        );\n      else\n        dye = resizeDoubleFBO(\n          dye,\n          dyeRes.width,\n          dyeRes.height,\n          rgba?.internalFormat ?? 0,\n          rgba?.format ?? 0,\n          texType ?? 0,\n          filtering,\n        );\n\n      if (!velocity)\n        velocity = createDoubleFBO(\n          simRes.width,\n          simRes.height,\n          rg?.internalFormat ?? 0,\n          rg?.format ?? 0,\n          texType ?? 0,\n          filtering,\n        );\n      else\n        velocity = resizeDoubleFBO(\n          velocity,\n          simRes.width,\n          simRes.height,\n          rg?.internalFormat ?? 0,\n          rg?.format ?? 0,\n          texType ?? 0,\n          filtering,\n        );\n\n      divergence = createFBO(\n        simRes.width,\n        simRes.height,\n        r?.internalFormat ?? 0,\n        r?.format ?? 0,\n        texType ?? 0,\n        context.gl.NEAREST,\n      );\n      curl = createFBO(\n        simRes.width,\n        simRes.height,\n        r?.internalFormat ?? 0,\n        r?.format ?? 0,\n        texType ?? 0,\n        context.gl.NEAREST,\n      );\n      pressure = createDoubleFBO(\n        simRes.width,\n        simRes.height,\n        r?.internalFormat ?? 0,\n        r?.format ?? 0,\n        texType ?? 0,\n        context.gl.NEAREST,\n      );\n\n      initBloomFramebuffers();\n      initSunraysFramebuffers();\n    };\n\n    const initBloomFramebuffers = () => {\n      let res = context.getResolution(GL_CONFIGS.BLOOM_RESOLUTION);\n\n      const texType = context.ext.halfFloatTexType;\n      const rgba = context.ext.formatRGBA;\n      const filtering = context.ext.supportLinearFiltering ? context.gl.LINEAR : context.gl.NEAREST;\n\n      bloom = createFBO(res.width, res.height, rgba?.internalFormat ?? 0, rgba?.format ?? 0, texType ?? 0, filtering);\n\n      bloomFramebuffers.length = 0;\n      for (let i = 0; i < GL_CONFIGS.BLOOM_ITERATIONS; i++) {\n        let width = res.width >> (i + 1);\n        let height = res.height >> (i + 1);\n        if (width < 2 || height < 2) break;\n        let fbo = createFBO(width, height, rgba?.internalFormat ?? 0, rgba?.format ?? 0, texType ?? 0, filtering);\n        bloomFramebuffers.push(fbo);\n      }\n    };\n\n    const initSunraysFramebuffers = () => {\n      let res = context.getResolution(GL_CONFIGS.SUNRAYS_RESOLUTION);\n\n      const texType = context.ext.halfFloatTexType;\n      const r = context.ext.formatR;\n      const filtering = context.ext.supportLinearFiltering ? context.gl.LINEAR : context.gl.NEAREST;\n\n      sunrays = createFBO(res.width, res.height, r?.internalFormat ?? 0, r?.format ?? 0, texType ?? 0, filtering);\n      sunraysTemp = createFBO(res.width, res.height, r?.internalFormat ?? 0, r?.format ?? 0, texType ?? 0, filtering);\n    };\n\n    function createFBO(\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number,\n    ): WebGLFBO {\n      context.gl.activeTexture(context.gl.TEXTURE0);\n      let texture = context.gl.createTexture();\n      context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MIN_FILTER, param);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MAG_FILTER, param);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_S, context.gl.CLAMP_TO_EDGE);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_T, context.gl.CLAMP_TO_EDGE);\n      context.gl.texImage2D(context.gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\n\n      let fbo = context.gl.createFramebuffer();\n      context.gl.bindFramebuffer(context.gl.FRAMEBUFFER, fbo);\n      context.gl.framebufferTexture2D(\n        context.gl.FRAMEBUFFER,\n        context.gl.COLOR_ATTACHMENT0,\n        context.gl.TEXTURE_2D,\n        texture,\n        0,\n      );\n      context.gl.viewport(0, 0, w, h);\n      context.gl.clear(context.gl.COLOR_BUFFER_BIT);\n\n      const texelSizeX = 1.0 / w;\n      const texelSizeY = 1.0 / h;\n\n      return {\n        texture,\n        fbo,\n        width: w,\n        height: h,\n        texelSizeX,\n        texelSizeY,\n        attach(id: number) {\n          context.gl.activeTexture(context.gl.TEXTURE0 + id);\n          context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n          return id;\n        },\n      };\n    }\n\n    function createDoubleFBO(\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number,\n    ): WebGLFBO {\n      let fbo1 = createFBO(w, h, internalFormat, format, type, param);\n      let fbo2 = createFBO(w, h, internalFormat, format, type, param);\n      return {\n        width: w,\n        height: h,\n        texelSizeX: fbo1?.texelSizeX ?? 0,\n        texelSizeY: fbo1?.texelSizeY ?? 0,\n        get read() {\n          return fbo1;\n        },\n        set read(value) {\n          fbo1 = value;\n        },\n        get write() {\n          return fbo2;\n        },\n        set write(value) {\n          fbo2 = value;\n        },\n        swap() {\n          let temp = fbo1;\n          fbo1 = fbo2;\n          fbo2 = temp;\n        },\n      };\n    }\n\n    function resizeFBO(\n      target: WebGLFBO,\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number,\n    ): WebGLFBO {\n      let newFBO = createFBO(w, h, internalFormat, format, type, param);\n      copyProgram.bind();\n      context.gl.uniform1i(copyProgram.uniforms.uTexture, target.attach ? target.attach(0) : 0);\n      blit(newFBO);\n      return newFBO;\n    }\n\n    function resizeDoubleFBO(\n      target: WebGLFBO,\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number,\n    ) {\n      if (target.width === w && target.height === h) return target;\n      if (!target.read) return target;\n      target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);\n      target.write = createFBO(w, h, internalFormat, format, type, param);\n      target.width = w;\n      target.height = h;\n      target.texelSizeX = 1.0 / w;\n      target.texelSizeY = 1.0 / h;\n      return target;\n    }\n\n    function createTextureAsync(url: string) {\n      let texture = context.gl.createTexture();\n      context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MIN_FILTER, context.gl.LINEAR);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_MAG_FILTER, context.gl.LINEAR);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_S, context.gl.REPEAT);\n      context.gl.texParameteri(context.gl.TEXTURE_2D, context.gl.TEXTURE_WRAP_T, context.gl.REPEAT);\n      context.gl.texImage2D(\n        context.gl.TEXTURE_2D,\n        0,\n        context.gl.RGB,\n        1,\n        1,\n        0,\n        context.gl.RGB,\n        context.gl.UNSIGNED_BYTE,\n        new Uint8Array([255, 255, 255]),\n      );\n\n      let obj: WebGLFBO = {\n        texture,\n        width: 1,\n        height: 1,\n        attach(id: number) {\n          context.gl.activeTexture(context.gl.TEXTURE0 + id);\n          context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n          return id;\n        },\n      };\n\n      let image = new Image();\n      image.onload = () => {\n        obj.width = image.width;\n        obj.height = image.height;\n        context.gl.bindTexture(context.gl.TEXTURE_2D, texture);\n        context.gl.texImage2D(\n          context.gl.TEXTURE_2D,\n          0,\n          context.gl.RGB,\n          context.gl.RGB,\n          context.gl.UNSIGNED_BYTE,\n          image,\n        );\n      };\n      image.src = url;\n\n      return obj;\n    }\n\n    const updateKeywords = () => {\n      const displayKeywords: string[] = [];\n      if (GL_CONFIGS.SHADING) displayKeywords.push('SHADING');\n      if (GL_CONFIGS.BLOOM) displayKeywords.push('BLOOM');\n      if (GL_CONFIGS.SUNRAYS) displayKeywords.push('SUNRAYS');\n      displayMaterial.setKeywords(...displayKeywords);\n    };\n\n    updateKeywords();\n    initFramebuffers();\n    multipleSplats(canvas, Math.floor(Math.random() * 20) + 5);\n\n    let lastUpdateTime = Date.now();\n    let colorUpdateTimer = 0.0;\n\n    const calcDeltaTime = () => {\n      const now = Date.now();\n      const dt = Math.min((now - lastUpdateTime) / 1000, 0.016666);\n      lastUpdateTime = now;\n      return dt;\n    };\n\n    const updateColors = (dt: number) => {\n      if (!GL_CONFIGS.COLORFUL) return;\n      colorUpdateTimer += dt * GL_CONFIGS.COLOR_UPDATE_SPEED;\n      if (colorUpdateTimer >= 1) {\n        colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\n        pointers.forEach((p) => {\n          p.color = generateColor();\n        });\n      }\n    };\n\n    const applyInputs = () => {\n      if (splatStack.length > 0) multipleSplats(canvas, splatStack.pop());\n\n      pointers.forEach((p) => {\n        if (p.moved) {\n          p.moved = false;\n          splatPointer(p);\n        }\n      });\n    };\n\n    const step = (dt: number) => {\n      context.gl.disable(context.gl.BLEND);\n\n      curlProgram.bind();\n      context.gl.uniform2f(\n        curlProgram.uniforms.texelSize,\n        velocity?.texelSizeX ?? 0 ?? 0,\n        velocity?.texelSizeY ?? 0 ?? 0,\n      );\n      context.gl.uniform1i(curlProgram.uniforms.uVelocity, velocity?.read?.attach ? velocity.read.attach(0) : 0);\n      blit(curl);\n\n      vorticityProgram.bind();\n      context.gl.uniform2f(\n        vorticityProgram.uniforms.texelSize,\n        velocity?.texelSizeX ?? 0 ?? 0,\n        velocity?.texelSizeY ?? 0 ?? 0,\n      );\n      context.gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity?.read?.attach ? velocity.read.attach(0) : 0);\n      if (curl?.attach) context.gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\n      context.gl.uniform1f(vorticityProgram.uniforms.curl, GL_CONFIGS.CURL);\n      context.gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n      if (velocity && velocity.write) blit(velocity.write);\n      if (velocity?.swap) velocity.swap();\n\n      divergenceProgram.bind();\n      context.gl.uniform2f(divergenceProgram.uniforms.texelSize, velocity?.texelSizeX ?? 0, velocity?.texelSizeY ?? 0);\n      context.gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity?.read?.attach ? velocity.read.attach(0) : 0);\n      blit(divergence);\n\n      clearProgram.bind();\n      context.gl.uniform1i(clearProgram.uniforms.uTexture, pressure?.read?.attach ? pressure.read.attach(0) : 0);\n      context.gl.uniform1f(clearProgram.uniforms.value, GL_CONFIGS.PRESSURE);\n      if (pressure?.write) blit(pressure.write);\n      if (pressure?.swap) pressure.swap();\n\n      pressureProgram.bind();\n      context.gl.uniform2f(pressureProgram.uniforms.texelSize, velocity?.texelSizeX ?? 0, velocity?.texelSizeY ?? 0);\n      if (divergence?.attach) context.gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));\n      for (let i = 0; i < GL_CONFIGS.PRESSURE_ITERATIONS; i++) {\n        if (pressure.read && pressure.read.attach)\n          context.gl.uniform1i(\n            pressureProgram.uniforms.uPressure,\n            pressure?.read?.attach ? pressure.read.attach(1) : 1,\n          );\n        if (pressure.write) blit(pressure.write);\n        if (pressure.swap) pressure.swap();\n      }\n\n      gradientSubtractProgram.bind();\n      context.gl.uniform2f(\n        gradientSubtractProgram.uniforms.texelSize,\n        velocity?.texelSizeX ?? 0,\n        velocity?.texelSizeY ?? 0,\n      );\n      context.gl.uniform1i(\n        gradientSubtractProgram.uniforms.uPressure,\n        pressure?.read?.attach ? pressure.read.attach(0) : 0,\n      );\n      context.gl.uniform1i(\n        gradientSubtractProgram.uniforms.uVelocity,\n        velocity?.read?.attach ? velocity.read.attach(1) : 1,\n      );\n      if (velocity?.write) blit(velocity.write);\n      if (velocity?.swap) velocity.swap();\n\n      advectionProgram.bind();\n      context.gl.uniform2f(advectionProgram.uniforms.texelSize, velocity?.texelSizeX ?? 0, velocity?.texelSizeY ?? 0);\n      if (!context.ext.supportLinearFiltering)\n        context.gl.uniform2f(\n          advectionProgram.uniforms.dyeTexelSize,\n          velocity?.texelSizeX ?? 0,\n          velocity?.texelSizeY ?? 0,\n        );\n      let velocityId = velocity?.read?.attach ? velocity.read.attach(0) : 0;\n      context.gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\n      context.gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\n      context.gl.uniform1f(advectionProgram.uniforms.dt, dt);\n      context.gl.uniform1f(advectionProgram.uniforms.dissipation, GL_CONFIGS.VELOCITY_DISSIPATION);\n      if (velocity?.write) blit(velocity.write);\n      if (velocity?.swap) velocity.swap();\n\n      if (!context.ext.supportLinearFiltering)\n        context.gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, dye?.texelSizeX ?? 0, dye?.texelSizeY ?? 0);\n      context.gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity?.read?.attach ? velocity.read.attach(0) : 0);\n      context.gl.uniform1i(advectionProgram.uniforms.uSource, dye?.read?.attach ? dye.read.attach(1) : 1);\n      context.gl.uniform1f(advectionProgram.uniforms.dissipation, GL_CONFIGS.DENSITY_DISSIPATION);\n      if (dye?.write) blit(dye.write);\n      if (dye?.swap) dye.swap();\n    };\n\n    const render = (target: WebGLFBO | null) => {\n      if (GL_CONFIGS.BLOOM && dye?.read) applyBloom(dye.read, bloom);\n      if (GL_CONFIGS.SUNRAYS) {\n        if (dye?.read && dye?.write) applySunrays(dye.read, dye.write, sunrays);\n        blur(sunrays, sunraysTemp, 1);\n      }\n\n      if (!target || !GL_CONFIGS.TRANSPARENT) {\n        context.gl.blendFunc(context.gl.ONE, context.gl.ONE_MINUS_SRC_ALPHA);\n        context.gl.enable(context.gl.BLEND);\n      } else {\n        context.gl.disable(context.gl.BLEND);\n      }\n\n      if (!GL_CONFIGS.TRANSPARENT) drawColor(target, normalizeColor(GL_CONFIGS.BACK_COLOR));\n      if (!target && GL_CONFIGS.TRANSPARENT) drawCheckerboard(target);\n      drawDisplay(target);\n    };\n\n    const drawColor = (target: WebGLFBO | null, color: ColorLike) => {\n      colorProgram.bind();\n      context.gl.uniform4f(colorProgram.uniforms.color, color.r, color.g, color.b, 1);\n      blit(target);\n    };\n\n    const drawCheckerboard = (target: WebGLFBO | null) => {\n      if (!canvas) return;\n      checkerboardProgram.bind();\n      context.gl.uniform1f(checkerboardProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n      blit(target);\n    };\n\n    const drawDisplay = (target: WebGLFBO | null) => {\n      let width = (!target ? context.gl.drawingBufferWidth : target.width) ?? 1;\n      let height = (!target ? context.gl.drawingBufferHeight : target.height) ?? 1;\n      displayMaterial.bind();\n      if (GL_CONFIGS.SHADING) context.gl.uniform2f(displayMaterial.uniforms.texelSize, 1.0 / width, 1.0 / height);\n      context.gl.uniform1i(displayMaterial.uniforms.uTexture, dye?.read?.attach ? dye.read.attach(0) : 0);\n      if (GL_CONFIGS.BLOOM) {\n        context.gl.uniform1i(displayMaterial.uniforms.uBloom, bloom?.attach ? bloom.attach(1) : 1);\n        context.gl.uniform1i(\n          displayMaterial.uniforms.uDithering,\n          ditheringTexture?.attach ? ditheringTexture.attach(2) : 2,\n        );\n        let scale = getTextureScale(ditheringTexture, width, height);\n        context.gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y);\n      }\n      if (GL_CONFIGS.SUNRAYS)\n        context.gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays?.attach ? sunrays.attach(3) : 3);\n      blit(target);\n    };\n\n    const applyBloom = (source: WebGLFBO, destination: WebGLFBO) => {\n      if (bloomFramebuffers.length < 2) return;\n      let last = destination;\n      context.gl.disable(context.gl.BLEND);\n      bloomPrefilterProgram.bind();\n      let knee = GL_CONFIGS.BLOOM_THRESHOLD * GL_CONFIGS.BLOOM_SOFT_KNEE + 0.0001;\n      let curve0 = GL_CONFIGS.BLOOM_THRESHOLD - knee;\n      let curve1 = knee * 2;\n      let curve2 = 0.25 / knee;\n      context.gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2);\n      context.gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, GL_CONFIGS.BLOOM_THRESHOLD);\n      context.gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source?.attach ? source.attach(0) : 0);\n      blit(last);\n      bloomBlurProgram.bind();\n      for (let i = 0; i < bloomFramebuffers.length; i++) {\n        let dest = bloomFramebuffers[i];\n        context.gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last?.texelSizeX ?? 0, last?.texelSizeY ?? 0);\n        context.gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last?.attach ? last.attach(0) : 0);\n        blit(dest);\n        last = dest;\n      }\n      context.gl.blendFunc(context.gl.ONE, context.gl.ONE);\n      context.gl.enable(context.gl.BLEND);\n      for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\n        let baseTex = bloomFramebuffers[i];\n        context.gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last?.texelSizeX ?? 0, last?.texelSizeY ?? 0);\n        context.gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last?.attach ? last.attach(0) : 0);\n        context.gl.viewport(0, 0, baseTex.width ?? 0, baseTex.height ?? 0);\n        blit(baseTex);\n        last = baseTex;\n      }\n      context.gl.disable(context.gl.BLEND);\n      bloomFinalProgram.bind();\n      context.gl.uniform2f(bloomFinalProgram.uniforms.texelSize, last?.texelSizeX ?? 0, last?.texelSizeY ?? 0);\n      context.gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last?.attach ? last.attach(0) : 0);\n      context.gl.uniform1f(bloomFinalProgram.uniforms.intensity, GL_CONFIGS.BLOOM_INTENSITY);\n      blit(destination);\n    };\n\n    const applySunrays = (source: WebGLFBO, mask: WebGLFBO, destination: WebGLFBO) => {\n      context.gl.disable(context.gl.BLEND);\n      sunraysMaskProgram.bind();\n      context.gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source?.attach ? source.attach(0) : 0);\n      blit(mask);\n      sunraysProgram.bind();\n      context.gl.uniform1f(sunraysProgram.uniforms.weight, GL_CONFIGS.SUNRAYS_WEIGHT);\n      context.gl.uniform1i(sunraysProgram.uniforms.uTexture, mask?.attach ? mask.attach(0) : 0);\n      blit(destination);\n    };\n\n    const blur = (target: WebGLFBO, temp: WebGLFBO, iterations: number) => {\n      blurProgram.bind();\n      for (let i = 0; i < iterations; i++) {\n        context.gl.uniform2f(blurProgram.uniforms.texelSize, target?.texelSizeX ?? 0, 0.0);\n        context.gl.uniform1i(blurProgram.uniforms.uTexture, target?.attach ? target.attach(0) : 0);\n        blit(temp);\n\n        context.gl.uniform2f(blurProgram.uniforms.texelSize, 0.0, target?.texelSizeY ?? 0);\n        context.gl.uniform1i(blurProgram.uniforms.uTexture, temp?.attach ? temp.attach(0) : 0);\n        blit(target);\n      }\n    };\n\n    function splat(canvas: HTMLCanvasElement, x: number, y: number, dx: number, dy: number, color: ColorLike) {\n      splatProgram.bind();\n      context.gl.uniform1i(splatProgram.uniforms.uTarget, velocity?.read?.attach ? velocity.read.attach(0) : 0);\n      context.gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n      context.gl.uniform2f(splatProgram.uniforms.point, x, y);\n      context.gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0);\n      context.gl.uniform1f(splatProgram.uniforms.radius, correctRadius(canvas, GL_CONFIGS.SPLAT_RADIUS / 100.0));\n      if (velocity?.write) blit(velocity.write);\n      if (velocity?.swap) velocity.swap();\n\n      context.gl.uniform1i(splatProgram.uniforms.uTarget, dye?.read?.attach ? dye.read.attach(0) : 0);\n      context.gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\n      if (dye?.write) blit(dye.write);\n      if (dye?.swap) dye.swap();\n    }\n\n    const splatPointer = (pointer: Pointer) => {\n      let dx = pointer.deltaX * GL_CONFIGS.SPLAT_FORCE;\n      let dy = pointer.deltaY * GL_CONFIGS.SPLAT_FORCE;\n      splat(canvas, pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n    };\n\n    function multipleSplats(canvas: HTMLCanvasElement, amount: number = 0) {\n      for (let i = 0; i < amount; i++) {\n        const color = generateColor();\n        color.r *= 10.0;\n        color.g *= 10.0;\n        color.b *= 10.0;\n        const x = Math.random();\n        const y = Math.random();\n        const dx = 1000 * (Math.random() - 0.5);\n        const dy = 1000 * (Math.random() - 0.5);\n        splat(canvas, x, y, dx, dy, color);\n      }\n    }\n\n    function correctRadius(canvas: HTMLCanvasElement, radius: number) {\n      let aspectRatio = canvas.width / canvas.height;\n      if (aspectRatio > 1) radius *= aspectRatio;\n      return radius;\n    }\n\n    window.addEventListener(\n      'mousedown',\n      (e) => {\n        const rect = canvas.getBoundingClientRect();\n        let posX = scaleByPixelRatio(e.clientX - rect.x);\n        let posY = scaleByPixelRatio(e.clientY - rect.y);\n        let pointer = pointers.find((p) => p.id === -1);\n        if (!pointer) pointer = new Pointer();\n        updatePointerDownData(pointer, -1, posX, posY);\n      },\n      { passive: false },\n    );\n\n    window.addEventListener(\n      'mousemove',\n      (e) => {\n        let pointer = pointers[0];\n        if (!pointer.down) return;\n        const rect = canvas.getBoundingClientRect();\n        let posX = scaleByPixelRatio(e.clientX - rect.x);\n        let posY = scaleByPixelRatio(e.clientY - rect.y);\n        updatePointerMoveData(pointer, posX, posY);\n      },\n      { passive: false },\n    );\n\n    window.addEventListener(\n      'mouseup',\n      () => {\n        updatePointerUpData(pointers[0]);\n      },\n      { passive: false },\n    );\n\n    window.addEventListener(\n      'touchstart',\n      (e) => {\n        if (/Mui(?:Backdrop|(?:Icon)?Button|Card|Typography)/i.test((e.target as Element).className)) return;\n        e.preventDefault();\n        const touches = e.targetTouches;\n        while (touches.length >= pointers.length) pointers.push(new Pointer());\n        const rect = canvas.getBoundingClientRect();\n        for (let i = 0; i < touches.length; i++) {\n          let posX = scaleByPixelRatio(touches[i].clientX - rect.x);\n          let posY = scaleByPixelRatio(touches[i].clientY - rect.y);\n          updatePointerDownData(pointers[i + 1], touches[i].identifier, posX, posY);\n        }\n      },\n      { passive: false },\n    );\n\n    window.addEventListener(\n      'touchmove',\n      (e) => {\n        if (/Mui(?:Backdrop|(?:Icon)?Button|Card|Typography)/i.test((e.target as Element).className)) return;\n        e.preventDefault();\n        const touches = e.targetTouches;\n        const rect = canvas.getBoundingClientRect();\n        for (let i = 0; i < touches.length; i++) {\n          let pointer = pointers[i + 1];\n          if (!pointer.down) continue;\n          let posX = scaleByPixelRatio(touches[i].clientX - rect.x);\n          let posY = scaleByPixelRatio(touches[i].clientY - rect.y);\n          updatePointerMoveData(pointer, posX, posY);\n        }\n      },\n      { passive: false },\n    );\n\n    window.addEventListener(\n      'touchend',\n      (e) => {\n        const touches = e.changedTouches;\n        for (let i = 0; i < touches.length; i++) {\n          let pointer = pointers.find((p) => p.id === touches[i].identifier);\n          if (!pointer) continue;\n          updatePointerUpData(pointer);\n        }\n      },\n      { passive: false },\n    );\n\n    window.addEventListener('keydown', (e) => {\n      if (e.code === 'KeyP') GL_CONFIGS.PAUSED = !GL_CONFIGS.PAUSED;\n      if (e.key === ' ')\n        splatStack.push(typeof GL_CONFIGS.SPLAT_COUNT === 'number' ? GL_CONFIGS.SPLAT_COUNT : GL_CONFIGS.SPLAT_COUNT());\n    });\n\n    let resizeTimeout: NodeJS.Timeout;\n    window.addEventListener('resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        resizeCanvas(canvas);\n        initFramebuffers();\n      }, GL_CONFIGS.RESIZE_DELAY);\n    });\n\n    const updatePointerDownData = (pointer: Pointer, id: number, posX: number, posY: number) => {\n      pointer.id = id;\n      pointer.down = true;\n      pointer.moved = false;\n      pointer.texcoordX = posX / canvas.width;\n      pointer.texcoordY = 1.0 - posY / canvas.height;\n      pointer.prevTexcoordX = pointer.texcoordX;\n      pointer.prevTexcoordY = pointer.texcoordY;\n      pointer.deltaX = 0;\n      pointer.deltaY = 0;\n      pointer.color = generateColor();\n    };\n\n    const updatePointerMoveData = (pointer: Pointer, posX: number, posY: number) => {\n      pointer.prevTexcoordX = pointer.texcoordX;\n      pointer.prevTexcoordY = pointer.texcoordY;\n      pointer.texcoordX = posX / canvas.width;\n      pointer.texcoordY = 1.0 - posY / canvas.height;\n      pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX);\n      pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY);\n      pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n    };\n\n    const updatePointerUpData = (pointer: Pointer) => {\n      pointer.down = false;\n    };\n\n    const correctDeltaX = (delta: number) => {\n      let aspectRatio = canvas.width / canvas.height;\n      if (aspectRatio < 1) delta *= aspectRatio;\n      return delta;\n    };\n\n    const correctDeltaY = (delta: number) => {\n      let aspectRatio = canvas.width / canvas.height;\n      if (aspectRatio > 1) delta /= aspectRatio;\n      return delta;\n    };\n\n    const update = () => {\n      const dt = calcDeltaTime();\n      updateColors(dt);\n      applyInputs();\n      if (!GL_CONFIGS.PAUSED) step(dt);\n      render(null);\n      requestAnimationFrame(update);\n    };\n\n    resizeCanvas(canvas);\n    update();\n\n    setInterval(() => {\n      if (splatStack.length > 0) return;\n      splatStack.push(typeof GL_CONFIGS.SPLAT_COUNT === 'number' ? GL_CONFIGS.SPLAT_COUNT : GL_CONFIGS.SPLAT_COUNT());\n    }, GL_CONFIGS.SPLAT_RATE);\n  }, [canvas]);\n\n  return <StyledCanvas ref={refCanvas} fixed={fixed} />;\n}\n\nexport default WebGLFluidSim;\n"]},"metadata":{},"sourceType":"module"}